{
  "compatibilityLevel": 1567,
  "model": {
    "annotations": [
      {
        "name": "PBI_QueryOrder",
        "value": "[\"Data Refresh\",\"Date Table\",\"fn_readDeltaTable\",\"fn_addDateKey\",\"DeltaLakeContainer\",\"RowsLimit\",\"fn_confirmAllNumericValues\",\"fn_addOptionColumnLabel\",\"fn_addOptions\",\"fn_buildDeltaLakeTable\",\"fn_addZone\",\"template_BuildDeltaLakeTable\",\"fn_buildDeltaLakeTableAll\",\"fn_dynamicsLink\",\"UnifyUrl\",\"UnifyAppId\",\"template_BuildDeltaLakeTableAll\",\"CSRI Intake\",\"CSRI Limited Intake Response\",\"Police Referral\",\"CSRI Notifier Contact Detail\",\"Interstate Child Protection Resquest\",\"Involved Person\",\"Contact\",\"Key Measures\",\"TargetMetadata\",\"Test Measures\",\"Linked Address\"]"
      },
      {
        "name": "__PBI_TimeIntelligenceEnabled",
        "value": "0"
      },
      {
        "name": "PBIDesktopVersion",
        "value": "2.124.2028.0 (23.12)"
      },
      {
        "name": "PBI_ProTooling",
        "value": "[\"DaxQueryView_Desktop\",\"DevMode\"]"
      }
    ],
    "culture": "en-US",
    "cultures": [
      {
        "name": "en-US",
        "linguisticMetadata": {
          "content": {
            "DynamicImprovement": "HighConfidence",
            "Entities": {
              "data_refresh": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "data refresh": {
                      "State": "Generated"
                    }
                  },
                  {
                    "refresh": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "information refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "fact refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "info refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "statistic refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "document refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "figure refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "record refresh": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  }
                ]
              },
              "data_refresh.last_refreshed": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh",
                    "ConceptualProperty": "Last Refreshed"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "last refreshed": {
                      "State": "Generated"
                    }
                  },
                  {
                    "end refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "final refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "closing refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "concluding refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "finishing refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "former refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "latest refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "latter refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "past refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "remaining refreshed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "data_refresh.last_updated": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh",
                    "ConceptualProperty": "Last Updated"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "last updated": {
                      "State": "Generated"
                    }
                  },
                  {
                    "end updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "final updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "closing updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "concluding updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "finishing updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "former updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "latest updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "latter updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "past updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "remaining updated": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "data_refresh.refresh_date": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh",
                    "ConceptualProperty": "RefreshDate"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "refresh date": {
                      "State": "Generated"
                    }
                  },
                  {
                    "RefreshDate": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "date": {
                      "State": "Generated",
                      "Weight": 0.7
                    }
                  },
                  {
                    "refresh moment": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "refresh period": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "data_refresh.time_viewed": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh",
                    "ConceptualProperty": "Time Viewed"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "time viewed": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date": {
                      "State": "Generated",
                      "Weight": 0.7
                    }
                  },
                  {
                    "duration viewed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "interval viewed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "moment viewed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "period viewed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "timetable viewed": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "data_refresh.user_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh",
                    "ConceptualProperty": "User Name"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "user": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "user nickname": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user title": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user label": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user tag": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "operator": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "employer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manipulator": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "handler": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manager": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "consumer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "data_refresh.user_principal": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Data Refresh",
                    "ConceptualProperty": "User Principal"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user principal": {
                      "State": "Generated"
                    }
                  },
                  {
                    "principal": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "main": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "major": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "chief": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "prime": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "basic": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fundamental": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "user leader": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "user doyenne": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "user doyen": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "leader": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "date_table": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "date table": {
                      "State": "Generated"
                    }
                  },
                  {
                    "moment table": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "period table": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "date tabletop": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "date bench": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "date board": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "date counter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "date stand": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "date slab": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "date desk": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "date stall": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "date_table.D_key": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "DKey"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "D key": {
                      "State": "Generated"
                    }
                  },
                  {
                    "DKey": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "key": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "main": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "basic": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fundamental": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "central": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "major": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "keynote": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "essential": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "d solution": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "d explanation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "d basis": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "date_table.date": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Date"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "date": {
                      "State": "Generated"
                    }
                  },
                  {
                    "moment": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "period": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "Date Received": {
                      "Source": {
                        "Agent": "PowerBI.VisualColumnRename",
                        "Type": "External"
                      },
                      "State": "Suggested",
                      "Weight": 0.9
                    }
                  }
                ]
              },
              "date_table.day": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Day"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "day": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "date_table.day_in_month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Days in Month"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "day in month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "in month": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "in mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "day in mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "date_table.day_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Day Name"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "day name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "day nickname": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "day title": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "day label": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "day tag": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "date_table.day_of_week": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Day of Week"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "day of week": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "date_table.day_of_year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Day of Year"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "day of year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "day of yr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "date_table.day_offset": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Day Offset"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "day offset": {
                      "State": "Generated"
                    }
                  },
                  {
                    "offset": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "day equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "day compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "day counterbalance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "day balance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "day counterpoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "day equipoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "day counterweight": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "counterbalance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "date_table.end_of_month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "End of Month"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "end of month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "end": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "completion of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "conclusion of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "expiration of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "close of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "finish of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "last of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "stop of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "closing of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "ending of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "completion": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  }
                ]
              },
              "date_table.end_of_quarter": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "End of Quarter"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "end of quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "end": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "completion of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "conclusion of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "expiration of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "close of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "finish of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "last of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "stop of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "closing of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "ending of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "completion": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  }
                ]
              },
              "date_table.end_of_week": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "End of Week"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "end of week": {
                      "State": "Generated"
                    }
                  },
                  {
                    "end": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "completion of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "conclusion of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "expiration of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "close of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "finish of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "last of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "stop of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "closing of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "ending of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "completion": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  }
                ]
              },
              "date_table.end_of_year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "End of Year"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "end of year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "end": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "completion of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "conclusion of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "expiration of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "close of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "finish of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "last of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "stop of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "closing of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "ending of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "completion": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  }
                ]
              },
              "date_table.fiscal_month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Fiscal Month"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "fiscal month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "fiscal mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "fisc month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  }
                ]
              },
              "date_table.fiscal_quarter": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Fiscal Quarter"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "fiscal quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "fiscal qtr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.833
                    }
                  },
                  {
                    "fisc quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "fiscal qrt": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "fiscal qrtr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  }
                ]
              },
              "date_table.fiscal_quarter_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Fiscal Quarter Name"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "fiscal quarter name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "fiscal quarter nickname": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "fiscal quarter title": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "fiscal quarter label": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "fiscal quarter tag": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "fiscal qtr name": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.677
                    }
                  },
                  {
                    "fisc quarter name": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.597
                    }
                  },
                  {
                    "fiscal qrt name": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.597
                    }
                  },
                  {
                    "fiscal qrtr name": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.597
                    }
                  }
                ]
              },
              "date_table.fiscal_year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Fiscal Year"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "fiscal year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "fiscal yr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "fisc year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "accounting year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "budget year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "fiscal date": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "fiscal day": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "tax year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  }
                ]
              },
              "date_table.month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Month"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  }
                ]
              },
              "date_table.month_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Month Name"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "month name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "month nickname": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "month title": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "month label": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "month tag": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "mth name": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  }
                ]
              },
              "date_table.month_offset": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Month Offset"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "month offset": {
                      "State": "Generated"
                    }
                  },
                  {
                    "offset": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "mth offset": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "month equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "month compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "month counterbalance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "month balance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "month counterpoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "month equipoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "month counterweight": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "date_table.quarter": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Quarter"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "qtr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.818
                    }
                  }
                ]
              },
              "date_table.quarter_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Quarter Name"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "quarter name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "quarter nickname": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "quarter title": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "quarter label": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "quarter tag": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "qtr name": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.667
                    }
                  }
                ]
              },
              "date_table.quarter_offset": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Quarter Offset"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "quarter offset": {
                      "State": "Generated"
                    }
                  },
                  {
                    "offset": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "qtr offset": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.667
                    }
                  },
                  {
                    "quarter equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "quarter compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "quarter counterbalance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "quarter balance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "quarter counterpoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "quarter equipoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "quarter counterweight": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "date_table.start_of_month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Start of Month"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "start of month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "start": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "start of mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "twitch of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jump of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jerk of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "flinch of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jolt of month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "twitch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jump": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jerk": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "flinch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "date_table.start_of_quarter": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Start of Quarter"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "start of quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "start": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "start of qtr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.677
                    }
                  },
                  {
                    "twitch of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jump of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jerk of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "flinch of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jolt of quarter": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "twitch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jump": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jerk": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "flinch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "date_table.start_of_week": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Start of Week"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "start of week": {
                      "State": "Generated"
                    }
                  },
                  {
                    "start": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "twitch of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jump of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jerk of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "flinch of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jolt of week": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "twitch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jump": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jerk": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "flinch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jolt": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "date_table.start_of_year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Start of Year"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "start of year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "start": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "start of yr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "twitch of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jump of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jerk of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "flinch of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "jolt of year": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "twitch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jump": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "jerk": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "flinch": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "date_table.week_of_month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Week of Month"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "week of month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "week of mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "date_table.week_of_year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Week of Year"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "week of year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "week of yr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "date_table.year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Year"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "yr": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  }
                ]
              },
              "date_table.year_offset": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Year Offset"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "year offset": {
                      "State": "Generated"
                    }
                  },
                  {
                    "offset": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "yr offset": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "year equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "year compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "equalizer": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "compensation": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "year counterbalance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "year balance": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "year counterpoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "year equipoise": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "year counterweight": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "date_table.yearmonth": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Year-Month"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "year-month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "year month": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "year-mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "year mth": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "yr -month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "yr month": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  }
                ]
              },
              "date_table.yearmonth_code": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Date Table",
                    "ConceptualProperty": "Year-Month Code"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "year-month code": {
                      "State": "Generated"
                    }
                  },
                  {
                    "year month code": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "month code": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "year-month id": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.771
                    }
                  },
                  {
                    "year month id": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "month id": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "year-month key": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.748
                    }
                  },
                  {
                    "year month key": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "month key": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "yr -month code": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.617
                    }
                  },
                  {
                    "year-mth code": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.617
                    }
                  },
                  {
                    "yr month code": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "year mth code": {
                      "Source": {
                        "Agent": "Thesaurus"
                      },
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              }
            },
            "Language": "en-US",
            "Relationships": {
              "data_refresh_has_last_refreshed": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh.last_refreshed"
                      },
                      "Subject": {
                        "Role": "data_refresh"
                      }
                    },
                    "ID": "data_refreshes_have_last_refreshed",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.last_refreshed": {
                    "Target": {
                      "Entity": "data_refresh.last_refreshed"
                    }
                  }
                },
                "State": "Generated"
              },
              "data_refresh_has_last_updated": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh.last_updated"
                      },
                      "Subject": {
                        "Role": "data_refresh"
                      }
                    },
                    "ID": "data_refreshes_have_last_updated",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.last_updated": {
                    "Target": {
                      "Entity": "data_refresh.last_updated"
                    }
                  }
                },
                "State": "Generated"
              },
              "data_refresh_has_refresh_date": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh.refresh_date"
                      },
                      "Subject": {
                        "Role": "data_refresh"
                      }
                    },
                    "ID": "data_refreshes_have_refresh_dates",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.refresh_date": {
                    "Target": {
                      "Entity": "data_refresh.refresh_date"
                    }
                  }
                },
                "State": "Generated"
              },
              "data_refresh_has_time_viewed": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh.time_viewed"
                      },
                      "Subject": {
                        "Role": "data_refresh"
                      }
                    },
                    "ID": "data_refreshes_have_time_viewed",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.time_viewed": {
                    "Target": {
                      "Entity": "data_refresh.time_viewed"
                    }
                  }
                },
                "State": "Generated"
              },
              "data_refresh_has_user_principal": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh.user_principal"
                      },
                      "Subject": {
                        "Role": "data_refresh"
                      }
                    },
                    "ID": "data_refreshes_have_user_principal",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.user_principal": {
                    "Target": {
                      "Entity": "data_refresh.user_principal"
                    }
                  }
                },
                "State": "Generated"
              },
              "data_refresh_is_refreshed_on_refresh_date": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "ID": "data_refreshes_are_refreshed_on_refresh_dates",
                    "State": "Generated",
                    "Verb": {
                      "Object": {
                        "Role": "data_refresh"
                      },
                      "Verbs": [
                        {
                          "refresh": {
                            "State": "Generated"
                          }
                        }
                      ]
                    },
                    "Weight": 0.9
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.refresh_date": {
                    "Target": {
                      "Entity": "data_refresh.refresh_date"
                    }
                  }
                },
                "SemanticSlots": {
                  "When": {
                    "Role": "data_refresh.refresh_date"
                  }
                },
                "State": "Generated"
              },
              "data_refresh_is_viewed_on_time_viewed": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "ID": "data_refreshes_are_viewed_on_time_viewed",
                    "State": "Generated",
                    "Verb": {
                      "Object": {
                        "Role": "data_refresh"
                      },
                      "Verbs": [
                        {
                          "view": {
                            "State": "Generated"
                          }
                        }
                      ]
                    },
                    "Weight": 0.9
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.time_viewed": {
                    "Target": {
                      "Entity": "data_refresh.time_viewed"
                    }
                  }
                },
                "SemanticSlots": {
                  "When": {
                    "Role": "data_refresh.time_viewed"
                  }
                },
                "State": "Generated"
              },
              "data_refresh_user_name_use_data_refresh": {
                "Binding": {
                  "ConceptualEntity": "Data Refresh"
                },
                "Phrasings": [
                  {
                    "ID": "user_name_use_data_refreshes",
                    "State": "Generated",
                    "Verb": {
                      "Object": {
                        "Role": "data_refresh"
                      },
                      "Subject": {
                        "Role": "data_refresh.user_name"
                      },
                      "Verbs": [
                        {
                          "use": {
                            "State": "Generated"
                          }
                        }
                      ]
                    },
                    "Weight": 0.75
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh"
                      },
                      "Subject": {
                        "Role": "data_refresh.user_name"
                      }
                    },
                    "ID": "user_name_have_data_refreshes",
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "data_refresh.user_name"
                      },
                      "Subject": {
                        "Role": "data_refresh"
                      }
                    },
                    "ID": "data_refreshes_have_user_name",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "data_refresh": {
                    "Target": {
                      "Entity": "data_refresh"
                    }
                  },
                  "data_refresh.user_name": {
                    "Target": {
                      "Entity": "data_refresh.user_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_D_key": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.D_key"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_D_keys",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.D_key": {
                    "Target": {
                      "Entity": "date_table.D_key"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_date": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.date"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_dates",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.date": {
                    "Target": {
                      "Entity": "date_table.date"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_day": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.day"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_days",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.day": {
                    "Target": {
                      "Entity": "date_table.day"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_day_in_month": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.day_in_month"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_day_in_month",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.day_in_month": {
                    "Target": {
                      "Entity": "date_table.day_in_month"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_day_name": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.day_name"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_day_names",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.day_name": {
                    "Target": {
                      "Entity": "date_table.day_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_day_of_week": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.day_of_week"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_day_of_week",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.day_of_week": {
                    "Target": {
                      "Entity": "date_table.day_of_week"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_day_of_year": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.day_of_year"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_day_of_year",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.day_of_year": {
                    "Target": {
                      "Entity": "date_table.day_of_year"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_day_offset": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.day_offset"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_day_offsets",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.day_offset": {
                    "Target": {
                      "Entity": "date_table.day_offset"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_end_of_month": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.end_of_month"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_end_of_month",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.end_of_month": {
                    "Target": {
                      "Entity": "date_table.end_of_month"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_end_of_quarter": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.end_of_quarter"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_end_of_quarter",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.end_of_quarter": {
                    "Target": {
                      "Entity": "date_table.end_of_quarter"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_end_of_week": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.end_of_week"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_end_of_week",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.end_of_week": {
                    "Target": {
                      "Entity": "date_table.end_of_week"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_end_of_year": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.end_of_year"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_end_of_year",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.end_of_year": {
                    "Target": {
                      "Entity": "date_table.end_of_year"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_fiscal_month": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.fiscal_month"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_fiscal_months",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.fiscal_month": {
                    "Target": {
                      "Entity": "date_table.fiscal_month"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_fiscal_quarter": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.fiscal_quarter"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_fiscal_quarters",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.fiscal_quarter": {
                    "Target": {
                      "Entity": "date_table.fiscal_quarter"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_fiscal_quarter_name": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.fiscal_quarter_name"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_fiscal_quarter_names",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.fiscal_quarter_name": {
                    "Target": {
                      "Entity": "date_table.fiscal_quarter_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_fiscal_year": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.fiscal_year"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_fiscal_years",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.fiscal_year": {
                    "Target": {
                      "Entity": "date_table.fiscal_year"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_month": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.month"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_months",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.month": {
                    "Target": {
                      "Entity": "date_table.month"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_month_name": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.month_name"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_month_names",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.month_name": {
                    "Target": {
                      "Entity": "date_table.month_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_month_offset": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.month_offset"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_month_offsets",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.month_offset": {
                    "Target": {
                      "Entity": "date_table.month_offset"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_quarter": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.quarter"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_quarters",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.quarter": {
                    "Target": {
                      "Entity": "date_table.quarter"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_quarter_name": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.quarter_name"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_quarter_names",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.quarter_name": {
                    "Target": {
                      "Entity": "date_table.quarter_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_quarter_offset": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.quarter_offset"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_quarter_offsets",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.quarter_offset": {
                    "Target": {
                      "Entity": "date_table.quarter_offset"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_start_of_month": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.start_of_month"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_start_of_month",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.start_of_month": {
                    "Target": {
                      "Entity": "date_table.start_of_month"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_start_of_quarter": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.start_of_quarter"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_start_of_quarter",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.start_of_quarter": {
                    "Target": {
                      "Entity": "date_table.start_of_quarter"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_start_of_week": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.start_of_week"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_start_of_week",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.start_of_week": {
                    "Target": {
                      "Entity": "date_table.start_of_week"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_start_of_year": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.start_of_year"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_start_of_year",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.start_of_year": {
                    "Target": {
                      "Entity": "date_table.start_of_year"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_week_of_month": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.week_of_month"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_week_of_month",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.week_of_month": {
                    "Target": {
                      "Entity": "date_table.week_of_month"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_week_of_year": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.week_of_year"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_week_of_year",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.week_of_year": {
                    "Target": {
                      "Entity": "date_table.week_of_year"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_year": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.year"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_years",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.year": {
                    "Target": {
                      "Entity": "date_table.year"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_year_offset": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.year_offset"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_year_offsets",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.year_offset": {
                    "Target": {
                      "Entity": "date_table.year_offset"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_yearmonth": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.yearmonth"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_yearmonths",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.yearmonth": {
                    "Target": {
                      "Entity": "date_table.yearmonth"
                    }
                  }
                },
                "State": "Generated"
              },
              "date_table_has_yearmonth_code": {
                "Binding": {
                  "ConceptualEntity": "Date Table"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "date_table.yearmonth_code"
                      },
                      "Subject": {
                        "Role": "date_table"
                      }
                    },
                    "ID": "date_tables_have_yearmonth_codes",
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "date_table": {
                    "Target": {
                      "Entity": "date_table"
                    }
                  },
                  "date_table.yearmonth_code": {
                    "Target": {
                      "Entity": "date_table.yearmonth_code"
                    }
                  }
                },
                "State": "Generated"
              }
            },
            "Version": "3.5.0"
          },
          "contentType": "json"
        }
      }
    ],
    "dataAccessOptions": {
      "fastCombine": true,
      "legacyRedirects": true,
      "returnErrorValuesAsNull": true
    },
    "defaultPowerBIDataSourceVersion": "powerBI_V3",
    "expressions": [
      {
        "name": "fn_readDeltaTable",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Function"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "    Source = let",
          "    fn_ReadDeltaTable = (",
          "        DeltaTableFolderContent as table,",
          "        optional DeltaTableOptions as record",
          "    ) as table =>",
          "",
          "    let",
          "",
          "        DeltaTableVersion = if DeltaTableOptions = null then null else Record.FieldOrDefault(DeltaTableOptions, \"Version\", null),",
          "        PartitionFilterFunction = if DeltaTableOptions = null then (x) => true else if Record.FieldOrDefault(DeltaTableOptions, \"PartitionFilterFunction\", null) = null then (x) => true else Record.Field(DeltaTableOptions, \"PartitionFilterFunction\"),",
          "        StatsFilterFunction = if DeltaTableOptions = null then (x, y) => true else if Record.FieldOrDefault(DeltaTableOptions, \"StatsFilterFunction\", null) = null then (x, y) => true else Record.Field(DeltaTableOptions, \"StatsFilterFunction\"),",
          "        UseFileBuffer = if DeltaTableOptions = null then false else if Record.FieldOrDefault(DeltaTableOptions, \"UseFileBuffer\", null) = null then false else Record.Field(DeltaTableOptions, \"UseFileBuffer\"),",
          "        IterateFolderContent = if DeltaTableOptions = null then false else if Record.FieldOrDefault(DeltaTableOptions, \"IterateFolderContent\", null) = null then false else Record.Field(DeltaTableOptions, \"IterateFolderContent\"),",
          "        TimeZoneOffset = \"+10:00\", //Add offset to all timestamp columns.",
          "        TimeZoneOffsetDuration = Duration.FromText(Text.TrimStart(TimeZoneOffset, \"+\")),",
          "",
          "        Delimiter = if Text.Contains(DeltaTableFolderContent{0}[Folder Path], \"//\") then \"/\" else \"\\\",",
          "",
          "        DeltaProtocol =",
          "        let",
          "            Source = #\"Logs ALL\",",
          "            #\"Filtered Rows1\" = Table.SelectRows(Source, each ([protocol] <> null)),",
          "            MaxVersion = Table.Group(#\"Filtered Rows1\", {}, {{\"MaxVersion\", each List.Max([Version]), type number}}){0}[MaxVersion],",
          "            #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered Rows1\", each [Version] = MaxVersion),",
          "            #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows2\",{\"protocol\"}),",
          "            #\"Expanded protocol\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"protocol\", {\"minReaderVersion\", \"minWriterVersion\"}, {\"minReaderVersion\", \"minWriterVersion\"}),",
          "            #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded protocol\",{{\"minReaderVersion\", Int64.Type}, {\"minWriterVersion\", Int64.Type}}),",
          "            #\"Renamed Columns\" = Table.Buffer(#\"Changed Type\")",
          "        in",
          "            #\"Renamed Columns\",",
          "",
          "        DeltaTableFolderContent_wFullPath = ",
          "        let",
          "            Source = DeltaTableFolderContent,",
          "",
          "            fn_ReadContentRecursive = (tbl as table) as table => ",
          "                let",
          "                    subFolders = Table.SelectRows(tbl, each Value.Is(_[Content], type table)),",
          "                    binaries = Table.SelectRows(tbl, each Value.Is(_[Content], type binary)),",
          "                    combinedContent = if Table.RowCount(subFolders) > 0 then Table.Combine({binaries, @fn_ReadContentRecursive(Table.Combine(subFolders[Content]))}) else binaries",
          "                in",
          "                    combinedContent,",
          "",
          "            Content = if IterateFolderContent then fn_ReadContentRecursive(Source) else Source,",
          "",
          "            #\"Added Full_Path\" = Table.AddColumn(Content, \"Full_Path\", each Text.Replace([Folder Path] & [Name], \"=\", \"%3D\"), Text.Type),",
          "            #\"Added File_Name\" = Table.AddColumn(#\"Added Full_Path\", \"File_Name\", each if Text.Length([Extension]) > 0 then List.Last(Text.Split([Full_Path], Delimiter)) else null, type text),",
          "            Buffered = Table.Buffer(#\"Added File_Name\")",
          "        in",
          "            Buffered,",
          "",
          "        PQ_DataTypes = ",
          "        let",
          "            Source = [",
          "                Any.Type = Any.Type,",
          "                None.Type = None.Type,",
          "                Day.Type = Day.Type,",
          "                Duration.Type = Duration.Type,",
          "                Record.Type = Record.Type,",
          "                Precision.Type = Precision.Type,",
          "                Number.Type = Number.Type,",
          "                Binary.Type = Binary.Type,",
          "                Byte.Type = Byte.Type,",
          "                Character.Type = Character.Type,",
          "                Text.Type = Text.Type,",
          "                Function.Type = Function.Type,",
          "                Null.Type = Null.Type,",
          "                List.Type = List.Type,",
          "                Type.Type = Type.Type,",
          "                Logical.Type = Logical.Type,",
          "                Int8.Type = Int8.Type,",
          "                Int16.Type = Int16.Type,",
          "                Int32.Type = Int32.Type,",
          "                Int64.Type = Int64.Type,",
          "                Single.Type = Single.Type,",
          "                Double.Type = Double.Type,",
          "                Decimal.Type = Decimal.Type,",
          "                Currency.Type = Currency.Type,",
          "                Percentage.Type = Percentage.Type,",
          "                Guid.Type = Guid.Type,",
          "                Date.Type = Date.Type,",
          "                DateTime.Type = DateTime.Type,",
          "                DateTimeZone.Type = DateTimeZone.Type,",
          "                Time.Type = Time.Type,",
          "                Table.Type = Table.Type",
          "            ]",
          "        in",
          "        Source,",
          "",
          "        #\"TableSchema\" = ",
          "        let",
          "            ExpressionText = \"type table [\" & Text.Combine(metadata_columns[TableDataType], \", \") & \"]\",",
          "            BufferedExpression = List.Buffer({ExpressionText}){0},",
          "            TableSchema = Expression.Evaluate(BufferedExpression, PQ_DataTypes)",
          "        in",
          "            TableSchema,",
          "",
          "        #\"PhysicalTableSchema\" =",
          "        let",
          "            ExpressionText = \"type table [\" & Text.Combine(metadata_columns[PhysicalTableDataType], \", \") & \"]\",",
          "            BufferedExpression = List.Buffer({ExpressionText}){0},",
          "            PhysicalTableSchema = Expression.Evaluate(BufferedExpression, PQ_DataTypes)",
          "        in",
          "            PhysicalTableSchema,",
          "",
          "        LogSchema = type [txn=record, add=record, remove=record, metaData=record, commitInfo=record, protocol=record],",
          "",
          "        #\"_delta_log Folder\" = ",
          "        let",
          "            Source = DeltaTableFolderContent_wFullPath,",
          "            #\"Filtered Rows\" = Table.SelectRows(Source, each Text.Contains([Full_Path], Delimiter & \"_delta_log\" & Delimiter)),",
          "            DeltaLogValidated = if Table.RowCount(#\"Filtered Rows\") = 0 then error \"Mandatory folder \" & Delimiter & \"_delta_log\" & Delimiter & \" not found in the root of the file listing! Are you sure this is a Delta Lake table?\" else #\"Filtered Rows\",",
          "            #\"Added Version\" = Table.AddColumn(DeltaLogValidated, \"Version\", each try Int64.From(Text.BeforeDelimiter([File_Name], \".\")) otherwise -1, Int64.Type),",
          "            MaxVersion = Table.Group(#\"Added Version\", {}, {{\"MaxVersion\", each List.Max([Version]), type number}}){0}[MaxVersion],",
          "            #\"Filtered RequestedVersion\" = if DeltaTableVersion = null then #\"Added Version\" ",
          "        else if DeltaTableVersion < 0 then Table.SelectRows(#\"Added Version\", each [Version] <= MaxVersion + DeltaTableVersion)",
          "        else Table.SelectRows(#\"Added Version\", each [Version] <= DeltaTableVersion),",
          "            BufferedTable = Table.Buffer(#\"Filtered RequestedVersion\"),",
          "            BufferedContent = Table.TransformColumns(BufferedTable,{{\"Content\", Binary.Buffer}})",
          "        in",
          "            BufferedContent,",
          "",
          "        #\"DeltaTablePath\" = ",
          "        let",
          "            DeltaTablePath = Text.Combine(List.RemoveLastN(Text.Split(#\"_delta_log Folder\"{0}[Full_Path], Delimiter), 2), Delimiter) & Delimiter",
          "        in",
          "            DeltaTablePath,",
          "",
          "        #\"_last_checkpoint\" = ",
          "        let",
          "            #\"_delta_log\" = #\"_delta_log Folder\",",
          "            #\"Filtered Rows\" = Table.SelectRows(_delta_log, each Text.EndsWith([Name], \"_last_checkpoint\")),",
          "            #\"Added Custom\" = Table.AddColumn(#\"Filtered Rows\", \"JsonContent\", each Json.Document([Content])),",
          "            JsonContent = #\"Added Custom\"{0}[JsonContent],",
          "            CheckEmpty = if Table.RowCount(#\"Filtered Rows\") = 0 then [Size=-1, version=-1] else JsonContent,",
          "            LatestCheckPointWithParts = if Record.HasFields(CheckEmpty, \"parts\") then CheckEmpty else Record.AddField(CheckEmpty, \"parts\", 1),",
          "",
          "            #\"Filtered Rows Version\" = Table.SelectRows(#\"_delta_log\", each Text.EndsWith([Name], \".checkpoint.parquet\")),",
          "            MaxVersion = try Table.Group(#\"Filtered Rows Version\", {}, {{\"MaxVersion\", each List.Max([Version]), type number}}){0}[MaxVersion] otherwise -1,",
          "            #\"Filtered Rows MaxVersion\" = Table.SelectRows(#\"Filtered Rows Version\", each [Version] = MaxVersion),",
          "            CheckpointFromVersion = [version=try MaxVersion otherwise -1, size=-1, parts = Table.RowCount(#\"Filtered Rows MaxVersion\")],",
          "",
          "            LastCheckpoint = Table.Buffer(Table.FromRecords({if DeltaTableVersion = null then LatestCheckPointWithParts else CheckpointFromVersion})){0}",
          "        in",
          "            LastCheckpoint,",
          "",
          "        #\"Checkpoint Files\" = ",
          "        let",
          "            LastCheckpointFile = {1..Record.Field(_last_checkpoint, \"parts\")},",
          "            #\"Converted to Table\" = Table.FromList(LastCheckpointFile, Splitter.SplitByNothing(), {\"part\"}, null, ExtraValues.Error),",
          "            #\"Add Version\" = Table.AddColumn(#\"Converted to Table\", \"version\", each Record.Field(_last_checkpoint, \"version\")),",
          "            #\"Add SingleFile\" = Table.AddColumn(#\"Add Version\", \"file_name\", each Text.PadStart(Text.From([version]), 20, \"0\") & \".checkpoint.parquet\", Text.Type),",
          "            #\"Add MultipleFiles\" = Table.AddColumn(#\"Add Version\", \"file_name\", each Text.PadStart(Text.From([version]), 20, \"0\") & \".checkpoint.\" & Text.PadStart(Text.From([part]), 10, \"0\") & \".\" & Text.PadStart(Text.From(Record.Field(_last_checkpoint, \"parts\")), 10, \"0\") & \".parquet\", Text.Type),",
          "            AllFiles = Table.SelectColumns(if Record.Field(_last_checkpoint, \"parts\") = 1 then #\"Add SingleFile\" else #\"Add MultipleFiles\", \"file_name\"),",
          "            AllFiles_BufferedList = List.Buffer(Table.ToList(AllFiles)),",
          "            Content = Table.SelectRows(#\"_delta_log Folder\", each List.Count(List.Select(AllFiles_BufferedList, (inner) => Text.EndsWith([Name], inner))) > 0)",
          "        in",
          "            Content,",
          "",
          "        #\"Logs Checkpoint\" = ",
          "        let",
          "            Source = #\"Checkpoint Files\",",
          "            #\"Parsed Logs\" = Table.AddColumn(Source, \"LogInfo\", each Parquet.Document([Content])),",
          "            #\"Combine LogInfo and Version\" = Table.Combine(Table.TransformRows(#\"Parsed Logs\", each fn_AddColumnsToTable([Version=_[Version]], _[LogInfo])))",
          "        in",
          "            #\"Combine LogInfo and Version\",",
          "",
          "        #\"Latest Log Files\" = ",
          "        let",
          "            Source = #\"_delta_log Folder\",",
          "            #\"Filtered Rows\" = Table.SelectRows(Source, each ([Extension] = \".json\")),",
          "            #\"Filtered Rows1\" = Table.SelectRows(#\"Filtered Rows\", each [Version] > Record.Field(_last_checkpoint, \"version\"))",
          "        in",
          "            #\"Filtered Rows1\",",
          "",
          "        #\"Logs JSON\" = ",
          "        let",
          "            Source = #\"Latest Log Files\",",
          "            #\"Added Custom\" = Table.AddColumn(Source, \"JsonContent\", each Lines.FromBinary([Content])),",
          "            #\"Expanded JsonContent\" = Table.ExpandListColumn(#\"Added Custom\", \"JsonContent\"),",
          "            #\"Parsed Logs\" = Table.TransformColumns(#\"Expanded JsonContent\",{{\"JsonContent\", Json.Document}}),",
          "            #\"Expanded Logs\" = Table.ExpandRecordColumn(#\"Parsed Logs\", \"JsonContent\", {\"add\", \"remove\", \"metaData\", \"commitInfo\", \"protocol\"}),",
          "            #\"Removed Other Columns\" = Table.SelectColumns(#\"Expanded Logs\",{\"Version\", \"add\", \"remove\", \"metaData\", \"commitInfo\", \"protocol\"})",
          "        in",
          "            #\"Removed Other Columns\",",
          "",
          "        #\"Logs ALL\" = ",
          "        let",
          "            Source = Table.Combine({#\"Logs Checkpoint\", #\"Logs JSON\"}),",
          "            #\"Added timestamp\" = Table.AddColumn(Source, \"log_timestamp\", each if [add] <> null then Record.Field([add], \"modificationTime\") else ",
          "        if [remove] <> null then Record.Field([remove], \"deletionTimestamp\") else ",
          "        if [commitInfo] <> null then Record.Field([commitInfo], \"timestamp\") else ",
          "        if [metaData] <> null then Record.Field([metaData], \"createdTime\") else null, Int64.Type),",
          "            #\"Added datetime\" = Table.AddColumn(#\"Added timestamp\", \"log_datetime\", each try #datetime(1970,1,1,0,0,0)+#duration(0,0,0,[log_timestamp]/1000) otherwise null, DateTime.Type)",
          "        in",
          "            #\"Added datetime\",",
          "",
          "        fn_GetPowerBIDataTypeInformation = ",
          "        (type_value as any, physical_name as logical, optional is_nullable as nullable logical) as text =>",
          "        let ",
          "            par_is_nullable = if is_nullable = null then true else is_nullable,",
          "",
          "            ret = if Value.Is(type_value, Record.Type) then ",
          "                    if type_value[type] = \"struct\" then \"[\" & Text.Combine(List.Transform(type_value[fields], each \"#\"\"\" & (if(physical_name) then _[metadata][delta.columnMapping.physicalName] else _[name]) & \"\"\" = \" & @fn_GetPowerBIDataTypeInformation(_[type], physical_name, _[nullable])), \", \") & \"]\"",
          "                    else if type_value[type] = \"array\" then \"{\" & @fn_GetPowerBIDataTypeInformation(type_value[elementType], physical_name, type_value[containsNull]) & \"}\"",
          "                    else if type_value[type] = \"map\" then \"table [Key=\" & @fn_GetPowerBIDataTypeInformation(type_value[keyType], false) & \", Value=\" & @fn_GetPowerBIDataTypeInformation(type_value[valueType], physical_name, type_value[valueContainsNull]) & \"]\"",
          "                    else \"Any.Type\"",
          "                else if type_value = \"string\" then \"Text.Type\"",
          "                else if type_value = \"long\" then \"Int64.Type\"",
          "                else if type_value = \"integer\" then \"Int32.Type\"",
          "                else if type_value = \"short\" then \"Int16.Type\"",
          "                else if type_value = \"byte\" then \"Int8.Type\"",
          "                else if type_value = \"float\" then \"Single.Type\"",
          "                else if type_value = \"double\" then \"Double.Type\"",
          "                else if type_value = \"date\" then \"Date.Type\"",
          "                else if type_value = \"timestamp\" and TimeZoneOffset = null then \"DateTime.Type\"",
          "                else if type_value = \"timestamp\" and TimeZoneOffset <> null then \"DateTimeZone.Type\"",
          "                else if type_value = \"boolean\" then \"Logical.Type\"",
          "                else if type_value = \"binary\" then \"Binary.Type\"",
          "                else if type_value = \"null\" then \"Any.Type\"",
          "                else if Text.StartsWith(type_value, \"decimal\") then \"Number.Type\"                ",
          "                else \"Any.Type\",",
          "",
          "            ret_nullable = (if par_is_nullable then \"nullable \" else \"\") & ret",
          "        in",
          "            ret_nullable,",
          "",
          "        #\"metadata_columns\" = ",
          "        let",
          "            Source = #\"Logs ALL\",",
          "            #\"Filtered Rows1\" = Table.SelectRows(Source, each ([metaData] <> null)),",
          "            MaxVersion = Table.Group(#\"Filtered Rows1\", {}, {{\"MaxVersion\", each List.Max([Version]), type number}}){0}[MaxVersion],",
          "            #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered Rows1\", each [Version] = MaxVersion),",
          "            #\"Kept First Rows\" = Table.FirstN(#\"Filtered Rows2\",1),",
          "            #\"Removed Other Columns\" = Table.SelectColumns(#\"Kept First Rows\",{\"metaData\"}),",
          "            #\"Expanded metaData\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"metaData\", {\"schemaString\", \"partitionColumns\"}, {\"schemaString\", \"partitionColumns\"}),",
          "            #\"Filtered Rows\" = Table.SelectRows(#\"Expanded metaData\", each ([schemaString] <> null)),",
          "            JSON = Table.TransformColumns(#\"Filtered Rows\",{{\"schemaString\", Json.Document}}),",
          "            #\"Expanded schemaString\" = Table.ExpandRecordColumn(JSON, \"schemaString\", {\"fields\"}, {\"fields\"}),",
          "            #\"Expanded fieldList\" = Table.ExpandListColumn(#\"Expanded schemaString\", \"fields\"),",
          "            #\"Expanded fields\" = Table.ExpandRecordColumn(#\"Expanded fieldList\", \"fields\", {\"name\", \"type\", \"nullable\", \"metadata\"}, {\"name\", \"type\", \"nullable\", \"metadata\"}),",
          "            #\"Added physicalName\" = Table.AddColumn(#\"Expanded fields\", \"physicalName\", each try Record.Field([metadata], \"delta.columnMapping.physicalName\") otherwise [name], type text),",
          "            #\"Changed Type\" = Table.TransformColumnTypes(#\"Added physicalName\",{{\"name\", type text}, {\"nullable\", type logical}}),",
          "            #\"Added isPartitionedBy\" = Table.Buffer(Table.AddColumn(#\"Changed Type\", \"isPartitionedBy\", each List.Contains([partitionColumns], [name]), Logical.Type)),",
          "            #\"Added PBI_Text\" = Table.AddColumn(#\"Added isPartitionedBy\", \"PBI_Text\", each fn_GetPowerBIDataTypeInformation([type], false, [nullable]), type text),",
          "            #\"Added PBI_DataType\" = Table.AddColumn(#\"Added PBI_Text\", \"PBI_DataType\", each Expression.Evaluate(\"type \" & [PBI_Text], PQ_DataTypes), type type),",
          "            #\"Added PBI_Transformation\" = Table.AddColumn(#\"Added PBI_DataType\", \"PBI_Transformation\", each ",
          "                        if [type] = \"string\" then Text.From",
          "                        else if [type] = \"long\" then Int64.From",
          "                        else if [type] = \"integer\" then Int32.From",
          "                        else if [type] = \"short\" then Int16.From",
          "                        else if [type] = \"byte\" then Int8.From",
          "                        else if [type] = \"float\" then Single.From",
          "                        else if [type] = \"double\" then Double.From",
          "                        else if [type] = \"date\" then Date.From",
          "                        else if [type] = \"timestamp\" and TimeZoneOffset = null then DateTime.From",
          "                        else if [type] = \"timestamp\" and TimeZoneOffset <> null then (x) as nullable datetimezone => DateTime.AddZone(x + TimeZoneOffsetDuration, Duration.Hours(TimeZoneOffsetDuration), Duration.Minutes(TimeZoneOffsetDuration))",
          "                        else if [type] = \"boolean\" then Logical.From",
          "                        else if [type] = \"binary\" then Binary.From",
          "                        else if (Value.Is([type], type text) and Text.StartsWith([type], \"decimal\")) then Number.From",
          "                        else (x) as nullable any => x, type function),",
          "            #\"Added physicalPBI_Text\" = Table.AddColumn(#\"Added PBI_Transformation\", \"physicalPBI_Text\", each fn_GetPowerBIDataTypeInformation([type], true, [nullable]), type text),",
          "            #\"Added physicalPBI_DataType\" = Table.AddColumn(#\"Added physicalPBI_Text\", \"physicalPBI_DataType\", each Expression.Evaluate(\"type \" & [physicalPBI_Text], PQ_DataTypes), type type),",
          "            #\"Added ChangeDataType\" = Table.AddColumn(#\"Added physicalPBI_DataType\", \"ChangeDataType\", each {[name], [PBI_DataType]}, type list),",
          "            #\"Added TableDataType\" = Table.AddColumn(#\"Added ChangeDataType\", \"TableDataType\", each \"#\"\"\" & [name] & \"\"\"=\" & Text.From([PBI_Text]), type text),",
          "            #\"Added PhysicalTableDataType\" = Table.AddColumn(#\"Added TableDataType\", \"PhysicalTableDataType\", each \"#\"\"\" & [physicalName] & \"\"\"=\" & Text.From([PBI_Text]), type text),",
          "            #\"Added ColumnTransformation\" = Table.AddColumn(#\"Added PhysicalTableDataType\", \"ColumnTransformation\", each {[physicalName], [PBI_Transformation]}, type list),",
          "            #\"Buffered Fields\" = Table.Buffer(#\"Added ColumnTransformation\")",
          "        in",
          "            #\"Buffered Fields\",",
          "",
          "        fn_AddColumnsToTable = ",
          "        (cols as record, tbl as table) as table =>",
          "        let ",
          "            colName = List.First(Record.FieldNames(cols)),",
          "            cols_new = Record.RemoveFields(cols, colName),",
          "            tbl_new = Table.AddColumn(tbl, colName, (x) => Record.Field(cols, colName), Value.Type(Record.Field(cols, colName))),",
          "",
          "            ret = if Record.FieldCount(cols) = 0 then tbl else if Record.FieldCount(cols_new) = 0 then tbl_new else @fn_AddColumnsToTable(cols_new, tbl_new)",
          "        in",
          "            ret,",
          "",
          "        #\"Files with Stats\" = ",
          "        let",
          "            Source = #\"Logs ALL\",",
          "            #\"Added Counter\" = Table.AddColumn(Source, \"Counter\", each if [remove] <> null then -1 else if [add] <> null then 1 else null, Int8.Type),",
          "            #\"Added file_name\" = Table.AddColumn(#\"Added Counter\", \"file_name\", each if [add] <> null then Record.Field([add], \"path\") else if [remove] <> null then Record.Field([remove], \"path\") else null, Text.Type),",
          "            #\"Filtered Rows\" = Table.SelectRows(#\"Added file_name\", each ([file_name] <> null)),",
          "            #\"Added partitionValuesTable\" = Table.AddColumn(#\"Filtered Rows\", \"partitionValuesTable\", each if [add] <> null then if Value.Is(Record.Field([add], \"partitionValues\"), Record.Type) then Record.ToTable(Record.Field([add], \"partitionValues\")) else Table.RenameColumns(Record.Field([add], \"partitionValues\"), {\"Key\", \"Name\"}) else null, type nullable table),",
          "            #\"Added partitionValuesJSON\" = Table.AddColumn(#\"Added partitionValuesTable\", \"partitionValuesJSON\", each Text.FromBinary(Json.FromValue([partitionValuesTable]))),",
          "            #\"Added stats\" = Table.AddColumn(#\"Added partitionValuesJSON\", \"stats\", each if [add] <> null then ",
          "                if Value.Is(Record.Field([add], \"stats\"), type text) ",
          "                then Record.Field([add], \"stats\") ",
          "                else \"{}\"",
          "                else null, type text),",
          "            #\"Grouped Rows1\" = Table.Group(#\"Added stats\", {\"file_name\"}, {{\"partitionValuesJSON\", each List.Max([partitionValuesJSON]), type nullable text}, {\"stats\", each List.Max([stats]), type nullable text}, {\"isRelevant\", each List.Sum([Counter]), type nullable text}}),",
          "            #\"Relevant Files\" = Table.SelectRows(#\"Grouped Rows1\", each ([isRelevant] > 0)),",
          "            #\"Added partitionValuesTable2\" = Table.AddColumn(#\"Relevant Files\", \"partitionValuesTable\", each try Table.FromRecords(Json.Document([partitionValuesJSON])) otherwise null),",
          "            #\"Added partitionValuesRecord\" = Table.AddColumn(#\"Added partitionValuesTable2\", \"partitionValuesRecord\", each Record.TransformFields(Record.FromTable([partitionValuesTable]), Table.SelectRows(#\"metadata_columns\", each [isPartitionedBy] = true)[ColumnTransformation]), Expression.Evaluate(\"type [\" & Text.Combine(Table.SelectRows(#\"metadata_columns\", each [isPartitionedBy] = true)[TableDataType], \", \") & \"]\", PQ_DataTypes)),",
          "            #\"Expanded partitionValuesRecord\" = Table.ExpandRecordColumn(#\"Added partitionValuesRecord\", \"partitionValuesRecord\", Table.SelectRows(#\"metadata_columns\", each [isPartitionedBy] = true)[physicalName]),",
          "            #\"Parse stats to JSON\" = Table.AddColumn(#\"Expanded partitionValuesRecord\", \"JSON\", each Json.Document([stats]), type [minValues=list, maxValues=list, numRecords=Int64.Type, nullCount=Int64.Type]),",
          "            #\"Expanded Stats\" = Table.ExpandRecordColumn(#\"Parse stats to JSON\", \"JSON\", {\"minValues\", \"maxValues\", \"numRecords\", \"nullCount\"}, {\"minValues\", \"maxValues\", \"numRecords\", \"nullCount\"}),",
          "            #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Stats\",{\"partitionValuesJSON\", \"stats\", \"isRelevant\", \"partitionValuesTable\"}),",
          "            #\"Renamed for Filters\" = Table.RenameColumns(#\"Removed Columns\",Table.ToRows(Table.SelectColumns(Table.SelectRows(metadata_columns, each [isPartitionedBy]),{\"physicalName\", \"name\"}))),",
          "            #\"Apply PartitionFilterFunction\" = Table.SelectRows(#\"Renamed for Filters\", each PartitionFilterFunction(_)),",
          "            #\"Apply StatsFilterFunction\" = Table.SelectRows(#\"Apply PartitionFilterFunction\", each StatsFilterFunction([minValues], [maxValues])),",
          "            #\"Renamed to physicalNames\" = Table.RenameColumns(#\"Apply StatsFilterFunction\",Table.ToRows(Table.SelectColumns(Table.SelectRows(metadata_columns, each [isPartitionedBy]),{\"name\", \"physicalName\"})))",
          "        in",
          "            #\"Renamed to physicalNames\",",
          "",
          "    #\"Data\" = ",
          "        let",
          "            #\"Added Full_Path\" = Table.AddColumn(#\"Files with Stats\", \"Full_Path\", each Text.Replace(DeltaTablePath & Text.Replace([file_name], \"=\", \"%3D\"), \"/\", Delimiter), Text.Type),",
          "            #\"Removed FilteringColumns\" = Table.RemoveColumns(#\"Added Full_Path\",{\"minValues\", \"maxValues\", \"numRecords\", \"nullCount\"}),",
          "            #\"Buffered RelevantFiles\" = Table.Buffer(#\"Removed FilteringColumns\"),",
          "            #\"Merged Queries\" = Table.NestedJoin(#\"Buffered RelevantFiles\", {\"Full_Path\"}, DeltaTableFolderContent_wFullPath, {\"Full_Path\"}, \"DeltaTable Folder\", JoinKind.Inner),",
          "            #\"Removed Full_Path\" = Table.RemoveColumns(#\"Merged Queries\",{\"Full_Path\"}),",
          "            #\"Expanded DeltaTable Folder\" = Table.ExpandTableColumn(#\"Removed Full_Path\", \"DeltaTable Folder\", {\"Content\"}, {\"Content\"}),",
          "            BufferFile = if UseFileBuffer then Table.TransformColumns(#\"Expanded DeltaTable Folder\",{{\"Content\", Binary.Buffer}}) else #\"Expanded DeltaTable Folder\",",
          "            #\"Read Parquet\" = Table.AddColumn(BufferFile, \"Data\", each Parquet.Document([Content]), type table),",
          "            #\"Removed Binary Column\" = Table.RemoveColumns(#\"Read Parquet\",{\"Content\"}),",
          "            #\"Combine Partition Values\" = Table.CombineColumnsToRecord(#\"Removed Binary Column\", \"cols\", List.RemoveItems(Table.ColumnNames(#\"Removed Binary Column\"), {\"Data\"})),",
          "            #\"Combine Files\" = Table.Combine(Table.TransformRows(#\"Combine Partition Values\", each fn_AddColumnsToTable(_[cols], _[Data])), PhysicalTableSchema),",
          "            #\"Changed Type\" = Table.TransformColumns(#\"Combine Files\",Table.SelectRows(metadata_columns, each [type] = \"timestamp\")[ColumnTransformation]),",
          "            #\"Table with TimeZoneOffset\" = if TimeZoneOffset = null then #\"Combine Files\" else #\"Changed Type\",",
          "            #\"Reordered Columns\" = Table.ReorderColumns(#\"Table with TimeZoneOffset\", metadata_columns[physicalName]),",
          "            #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",Table.ToRows(Table.SelectColumns(metadata_columns,{\"physicalName\", \"name\"}))),",
          "            #\"Renamed ComplexTypes\" = #\"Renamed Columns\" //Table.TransformColumnTypes(#\"Renamed Columns\",Table.ToRows(Table.SelectColumns(Table.SelectRows(metadata_columns, each [name] = \"structColumn\"),{\"name\", \"PBI_DataType\"})))",
          "        //Table.TransformColumnTypes(#\"Renamed Columns\",Table.ToRows(Table.SelectColumns(Table.SelectRows(metadata_columns, each [name] = \"structColumn\"),{\"name\", \"PBI_DataType\"})))",
          "        ,",
          "",
          "            #\"Validate ReaderVersion\" = if DeltaProtocol{0}[minReaderVersion] <= 2 then #\"Renamed ComplexTypes\" else error Error.Record(\"DeltaLakeVersionNotSupported\", \"This Connector currently only supports DeltaLake tables up to version 2.\", \"minReaderVersion\"),",
          "            FinalDeltaTable = Table.View(",
          "                #\"Validate ReaderVersion\", ",
          "                [",
          "                    GetType = () => TableSchema,",
          "                    GetRowCount = () => List.Sum(#\"Files with Stats\"[numRecords])",
          "                    //,OnSelectRows = (condition) => Table.FirstN(#\"Reordered Columns\", 3)",
          "                ]",
          "            )",
          "        in",
          "            FinalDeltaTable",
          "            ",
          "    in ",
          "        #\"Data\",",
          "",
          "    documentation = [",
          "        Documentation.Name =  \"fn_ReadDeltaTable\",",
          "        Documentation.Description = \"Takes the file/folder list of a Delta Lake table and returns the content as a table object in Power Query.\",",
          "        Documentation.LongDescription = \"Takes the file/folder list of a Delta Lake table and returns the content as a table object in Power Query. An optional 2nd parameter can be used to for special features like Time Travel, Partition Elimination, etc.\",",
          "        Documentation.Category = \"Table\",",
          "        Documentation.Source = \"https://github.com/delta-io/connectors/blob/master/powerbi/fn_ReadDeltaTable.pq\",",
          "        Documentation.Version = \"1.0\",",
          "        Documentation.Author = \"Gerhard Brueckl, paiqo GmbH\",",
          "        Documentation.Examples = {[Description =  \"Reading Delta Lake table from Azure Blob Storage with Time-Travel\",",
          "            Code = \"let",
          "    Source = AzureStorage.Blobs(\"\"https://gbadls01.blob.core.windows.net/public\"\"),",
          "    #\"\"Filtered Rows\"\" = Table.SelectRows(Source, each Text.StartsWith([Name], \"\"powerbi_delta/FactInternetSales_part.delta/\"\")),",
          "    DeltaTable = fn_ReadDeltaTable(#\"\"Filtered Rows\"\", [Version=7])",
          "in",
          "    DeltaTable\",",
          "            Result = \"#table( {\"\"ProductKey\"\", \"\"OrderDateKey\"\", \"\"Value\"\"}, { {\"\"A\"\", \"\"2020-01-01\"\", 123} ,{\"\"B\"\", \"\"2020-04-02\"\", 45} } )\"],",
          "            ",
          "            [Description =  \"Reading Delta Lake table from Azure Data Lake Storage Gen2 with PartitionFilterFunction\",",
          "            Code = \"let",
          "    Source = AzureStorage.DataLake(\"\"https://gbadls01.dfs.core.windows.net/public/powerbi_delta/FactInternetSales_part.delta\"\", [HierarchicalNavigation = false]),",
          "    DeltaTable = fn_ReadDeltaTable(Source, [PartitionFilterFunction=(x) => x[SalesTerritoryKey] = 3])",
          "in",
          "    DeltaTable\",",
          "            Result = \"#table( {\"\"ProductKey\"\", \"\"OrderDateKey\"\", \"\"SalesTerritoryKey\"\", \"\"Value\"\"}, { {\"\"A\"\", \"\"2020-01-01\"\", 3, 123} ,{\"\"B\"\", \"\"2020-04-02\"\", 3, 45} } )\"]",
          "        }",
          "    ]",
          "  ",
          "in",
          "    Value.ReplaceType(fn_ReadDeltaTable, Value.ReplaceMetadata(Value.Type(fn_ReadDeltaTable), documentation))",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "b698c8d6-132a-401f-9759-5bf730cbed3f",
        "queryGroup": "Functions"
      },
      {
        "name": "fn_addDateKey",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let",
          "    Source = let",
          "    fn_addDateKey = (source as table, columnName as text) =>",
          "        ",
          "    let",
          "        AddDuplicateColumn = Table.DuplicateColumn(source, columnName, \"DuplicateColumn\"),",
          "        DateTimeColumn = Table.TransformColumnTypes(AddDuplicateColumn,{{\"DuplicateColumn\", type date}}),",
          "        CreateKeyText = Table.AddColumn(DateTimeColumn, \"DKey_\"& columnName, each Date.ToText(Record.Field(_, \"DuplicateColumn\"),\"yyyyMMdd\")),",
          "        ChangeKeyToNumber = Table.TransformColumnTypes(CreateKeyText,{{\"DKey_\"& columnName, Int64.Type}}),",
          "        RemovedDuplicateColumn = Table.RemoveColumns(ChangeKeyToNumber,{\"DuplicateColumn\"})",
          "    in",
          "        RemovedDuplicateColumn",
          " ",
          " ,",
          " documentation = [",
          "Documentation.Name =  \" Name: Create A DateKey from Chosen Column \",",
          "",
          "Documentation.LongDescription = \" Description: Takes table or previous step in query with Column name as parameters and adds equivelant datekey with values in the format of yyyymmdd.  \",",
          "Documentation.Author = \"Joshua Walker \",",
          "Documentation.Examples = {[Description =  \" To use the code in a query step pass in the two paramaters like this. ",
          "fn_AddDateKey(#\"\"Previous Query Step\"\",\"\"Modified On\"\") or fn_AddDateKey(PreviousQueryStep,\"\"ModifiedOn\"\") depending on spaces in paramater names.\",",
          "Code = \" let",
          "        AddDuplicateColumn = Table.DuplicateColumn(source, columnName, \"\"DuplicateColumn\"\"),",
          "        DateTimeColumn = Table.TransformColumnTypes(AddDuplicateColumn,{{\"\"DuplicateColumn\"\", type date}}),",
          "        CreateKeyText = Table.AddColumn(DateTimeColumn, \"\"DKey_\"\"& columnName, each Date.ToText(Record.Field(_, \"\"DuplicateColumn\"\"),\"\"yyyyMMdd\"\")),",
          "        ChangeKeyToNumber = Table.TransformColumnTypes(CreateKeyText,{{\"\"DKey_\"\"& columnName, Int64.Type}}),",
          "        RemovedDuplicateColumn = Table.RemoveColumns(ChangeKeyToNumber,{\"\"DuplicateColumn\"\"})",
          "    in",
          "        RemovedDuplicateColumn \",",
          "Result = \" Added column with prefix of Dkey_ and date key values in format of number displayed as yyyymmdd",
          "\"]}]",
          "",
          "in",
          "    Value.ReplaceType(fn_addDateKey, Value.ReplaceMetadata(Value.Type(fn_addDateKey), documentation))",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "1fc2b3f5-277d-4150-bf19-e098723e0b42",
        "queryGroup": "Functions"
      },
      {
        "name": "DeltaLakeContainer",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "expression": "\"https://dlzedpdevwork.dfs.core.windows.net/sit10-unify-delta-lake/\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]",
        "kind": "m",
        "lineageTag": "069eda8e-9c35-4f39-951a-71358bbc86cb",
        "queryGroup": "Parameters"
      },
      {
        "name": "RowsLimit",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Number"
          }
        ],
        "description": [
          "Limits the number of rows loaded for queries.",
          "0 Loads all Rows",
          "5 Loads 5 Rows"
        ],
        "expression": "0 meta [IsParameterQuery=true, Type=\"Number\", IsParameterQueryRequired=true]",
        "kind": "m",
        "lineageTag": "1c398fa2-0ecc-4ae2-9c9f-81c58b3413ce",
        "queryGroup": "Parameters"
      },
      {
        "name": "fn_confirmAllNumericValues",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let",
          "    // Custom function to check if any value in a column is numeric",
          "    CheckNumericColumn = (source as table, columnName as text) =>",
          "        let",
          "            // Function to check if a value contains only digits",
          "            isNumeric = (text) =>",
          "                Text.Length(Text.Remove(text, {\"0\"..\"9\"})) = 0,",
          "",
          "            // Create a list of boolean values indicating if each value in the column is numeric",
          "            isNumericList = List.Transform(Table.Column(source, columnName), each isNumeric(_)),",
          "",
          "            // Check if values in the list is numeric",
          "            anyNumeric = List.AllTrue(isNumericList)",
          "        in",
          "            anyNumeric",
          "in",
          "    CheckNumericColumn"
        ],
        "kind": "m",
        "lineageTag": "fc786e2b-0755-4fe2-b528-0c3727330668",
        "queryGroup": "Functions\\Build Delta Lake Table"
      },
      {
        "name": "fn_addOptionColumnLabel",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let source = (state as table, optionSetName as text, FilteredOptionSet as table) as table =>",
          "    let    ",
          "        // Filter OptionSet for the current option set name",
          "        FilteredOptionSetForColumn = Table.SelectColumns(Table.SelectRows(FilteredOptionSet, each [OptionSetName] = optionSetName), {\"Option\", \"LocalizedLabel\"}),",
          "        ",
          "        // Merge Account with filtered OptionSet to get localized labels",
          "        mergedTable = Table.Join(state, optionSetName, FilteredOptionSetForColumn, \"Option\", JoinKind.LeftOuter),         ",
          "",
          "        // Rename the LocalizedLabel column",
          "        newColumnName = optionSetName & \"_label\",",
          "        renamedColumn = Table.RenameColumns(mergedTable, {{\"LocalizedLabel\", newColumnName}}),",
          "",
          "        // Remove the redundant Option column",
          "        removedColumns = Table.RemoveColumns(renamedColumn, {\"Option\"})",
          "",
          "    in",
          "        removedColumns",
          "in        ",
          " source"
        ],
        "kind": "m",
        "lineageTag": "848be677-36f0-4e0a-bba1-74ab320337d6",
        "queryGroup": "Functions\\Build Delta Lake Table"
      },
      {
        "name": "fn_addOptions",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let ",
          "    source = (OptionSetNames as list, target as table, FilteredOptionSet as table) as table =>",
          "    let",
          "        AddOptionLabel = List.Accumulate(OptionSetNames, target, (state, optionSetName) =>",
          "            let",
          "                // Check all values for the optionset column will convert to Int64, then convert, else do nothing",
          "                CheckDataBeforeJoin =",
          "                    if (Table.Schema(state){[Name=optionSetName]}[Kind] = \"text\" and fn_confirmAllNumericValues(state, optionSetName) = true)",
          "                        or (Table.Schema(state){[Name=optionSetName]}[Kind] = \"logical\") then",
          "                            // Function to convert the column to number or keep the original value on error",
          "                            Table.TransformColumnTypes(state, {{optionSetName, Int64.Type}})",
          "                        else",
          "                            state,",
          "",
          "                // Check if the column is of type Int64 and call the function to add the option column label",
          "                resultTable =",
          "                    if (Table.Schema(CheckDataBeforeJoin){[Name=optionSetName]}[TypeName] = \"Int64.Type\") then",
          "                        fn_addOptionColumnLabel(CheckDataBeforeJoin, optionSetName, FilteredOptionSet)",
          "                    else",
          "                        CheckDataBeforeJoin",
          "            in",
          "                resultTable",
          "        )",
          "    in",
          "        AddOptionLabel",
          "in",
          "",
          "source"
        ],
        "kind": "m",
        "lineageTag": "b378d2e6-dd2f-4af8-a70c-6d72f1b5e1f9",
        "queryGroup": "Functions\\Build Delta Lake Table"
      },
      {
        "name": "fn_buildDeltaLakeTable",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "/*",
          "This Power Query function, named `fn_buildDeltaLakeTable`, is designed to create a table from a Delta Lake folder with additional transformations specifically tailored for working with Delta Lake folders and their associated metadata. ",
          "This function is an extension of (`fn_buildDeltaLakeTableAll`), with additional steps for handling columns that have at least one non-null value. ",
          "It aims to create a Data Verse table from a Delta Lake folder while selectively populating Option Set and Global Option Set columns based on non-null values.",
          "",
          "Here's a step-by-step breakdown of the function:",
          "",
          "",
          "### Function Parameters",
          "- DeltaLakeFolder: The function takes a single parameter, `DeltaLakeFolder`, which is expected to be a text value representing the Delta Lake folder.",
          "",
          "### Main Function Steps",
          "1. Distinct ForeignKeyList:",
          "   - Reads metadata from the \"TargetMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Extracts distinct values from the \"AttributeName\" column.",
          "   - Creates a list named `ForeignKeyList` containing distinct foreign key attributes.",
          "",
          "2. Filtered Optionsets for DeltaLakeFolder:",
          "   - Reads metadata from the \"OptionsetMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns (\"EntityName\", \"OptionSetName\", \"Option\", \"LocalizedLabel\").",
          "   - Creates a table named `FilteredOptionSets` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "3. Filtered Global Optionsets for DeltaLakeFolder:",
          "   - Reads metadata from the \"GlobalOptionsetMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns, transforms the \"Option\" column to Int64.Type.",
          "   - Creates a table named `FilteredGlobalOptionSets` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "4. Filtered State Metadata for DeltaLakeFolder:",
          "   - Reads metadata from the \"StateMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns, transforms the \"State\" column to Int64.Type.",
          "   - Creates a table named `FilteredStateMetadata` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "5. Filtered Status Metadata for DeltaLakeFolder:",
          "   - Reads metadata from the \"StatusMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns, transforms the \"State\" column to Int64.Type.",
          "   - Creates a table named `FilteredStatusMetadata` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "6. DeltaTableColumnsToKeep:",
          "   - Extracts the columns from the Delta Lake table that have at least one non-null value.",
          "",
          "7. OptionSetColumnsToPopulate:",
          "   - Extracts distinct names of Option Set columns where at least one non-null value exists in the Delta Lake table.",
          "",
          "8. GlobalOptionSetColumnsToPopulate:",
          "   - Extracts distinct names of Global Option Set columns where at least one non-null value exists in the Delta Lake table.",
          "",
          "9. SelectColumnsToKeep:",
          "    - Selects columns to keep in the Delta Lake table based on the `DeltaTableColumnsToKeep` list.",
          "",
          "10. Add State Column:",
          "    - Checks if the table has a \"statecode\" column.",
          "    - If yes, performs a left outer join with the \"FilteredStateMetadata\" table on \"statecode\" and expands the \"LocalizedLabel\" column.",
          "    - Renames the expanded column to \"State\".",
          "",
          "11. Add Status Column:",
          "    - Checks if the table has \"statecode\" and \"statuscode\" columns.",
          "    - If yes, performs a left outer join with the \"FilteredStatusMetadata\" table on \"statecode\" and \"statuscode,\" then expands the \"LocalizedLabel\" column.",
          "    - Renames the expanded column to \"Status\".",
          "",
          "12. Add OptionSet Label Columns:",
          "    - Calls a custom function `fn_addOptions` to add option set label columns based on non-null Option Set columns.",
          "",
          "13. Add Global OptionSet Label Columns:",
          "    - Calls the same custom function to add global option set label columns based on non-null Global Option Set columns.",
          "",
          "14. Rename Columns:",
          "    - Renames primary key columns with a prefix \"PK_\" if they match the pattern of `DeltaLakeFolder & \"id\"`.",
          "    - Renames foreign key columns with a prefix \"FK_\" if they are present in the `ForeignKeyList`.",
          "    - Adds prefixes \"GOS_\" and \"OS_\" to columns related to global and regular option sets, respectively.",
          "",
          "15. Row Limiter:",
          "    - Checks if a `RowsLimit` variable is defined and greater than 0.",
          "    - If true, limits the number of rows in the table to the specified `RowsLimit`.",
          "",
          "16. Update createdon text date field:",
          "    - Checks if the table has a \"CreatedOn\" column.",
          "    - Renames the \"CreatedOn\" column to \"createdon\" if present.",
          "    - Updates the time zone of the \"createdon\" column to UTC+10.",
          "",
          "### Documentation",
          "- The documentation provides information about the function's name, description, and examples of how to use the function in a query.",
          "*/",
          "let Source =",
          "",
          "let",
          "    // Define the function with a single text input parameter",
          "    fn_buildDeltaLakeTable = (ReadDeltaTable as table,TargetMetadata as table, OptionsetMetadata as table, GlobalOptionsetMetadata as table,StateMetadata as table,StatusMetadata as table, DeltaLakeFolder as text) =>",
          "",
          "let",
          "",
          "  //Parameters for Query",
          "  //DeltaLakeFolder = \"account\",",
          "  //Distinct ForeignKeyList",
          "  ForeignKeyList = List.Distinct(",
          "    Table.Column(",
          "      Table.SelectRows(",
          "        TargetMetadata,",
          "        each ([EntityName] = DeltaLakeFolder)",
          "      ),",
          "      \"AttributeName\"",
          "    )",
          "  ),",
          "  //Filtered Optionset for DeltaLakeFolder",
          "  FilteredOptionSets = Table.SelectRows(",
          "    Table.SelectColumns(",
          "      OptionsetMetadata,",
          "      {\"EntityName\", \"OptionSetName\", \"Option\", \"LocalizedLabel\"}",
          "    ),",
          "    each ([EntityName] = DeltaLakeFolder)",
          "  ),",
          "  //Filtered Global Optionset for DeltaLakeFolder with Option Column Transform",
          "  FilteredGlobalOptionSets = Table.TransformColumnTypes(",
          "    Table.SelectRows(",
          "      Table.SelectColumns(",
          "        GlobalOptionsetMetadata,",
          "        {\"EntityName\", \"OptionSetName\", \"Option\", \"LocalizedLabel\"}",
          "      ),",
          "      each ([EntityName] = DeltaLakeFolder)",
          "    ),",
          "    {{\"Option\", Int64.Type}}",
          "  ),",
          "  //Filtered State Metadata for DeltaLakeFolder with State Column Transform",
          "  FilteredStateMetadata = Table.TransformColumnTypes(",
          "    Table.SelectColumns(",
          "      Table.SelectRows(",
          "        StateMetadata,",
          "        each ([EntityName] = DeltaLakeFolder)",
          "      ),",
          "      {\"State\", \"LocalizedLabel\"}",
          "    ),",
          "    {{\"State\", Int64.Type}}",
          "  ),",
          "  //Filtered Status Metadata for DeltaLakeFolder with State & Status Column Transform",
          "  FilteredStatusMetadata = Table.TransformColumnTypes(",
          "    Table.SelectColumns(",
          "      Table.SelectRows(",
          "        StatusMetadata,",
          "        each ([EntityName] = DeltaLakeFolder)",
          "      ),",
          "      {\"Status\", \"LocalizedLabel\"}",
          "    ),",
          "    {{\"Status\", Int64.Type}}",
          "  ),",
          "  //Start of building Delta Lake Table",
          "  DeltaTableColumnsToKeep = List.Select(",
          "    Table.ColumnNames(ReadDeltaTable),",
          "    each List.NonNullCount(Table.Column(ReadDeltaTable, _)) <> 0",
          "  ),",
          "  // Get Distinct List of OptionSet Columns where dataset column are non null",
          "  OptionSetColumnsToPopulate = List.Select(",
          "    List.Distinct(Table.Column(FilteredOptionSets, \"OptionSetName\")),",
          "    each List.NonNullCount(",
          "      if Table.HasColumns(ReadDeltaTable, _) then Table.Column(ReadDeltaTable, _) else {}",
          "    )",
          "      <> 0",
          "  ),",
          "  // Get Distinct List of GlobalOptionSet Columns where dataset column are non null",
          "  GlobalOptionSetColumnsToPopulate = List.Select(",
          "    List.Distinct(Table.Column(FilteredGlobalOptionSets, \"OptionSetName\")),",
          "    each List.NonNullCount(",
          "      if Table.HasColumns(ReadDeltaTable, _) then Table.Column(ReadDeltaTable, _) else {}",
          "    )",
          "      <> 0",
          "  ),",
          "  SelectColumnsToKeep = Table.SelectColumns(ReadDeltaTable, DeltaTableColumnsToKeep),",
          "  //Add State Column",
          "  AddState =",
          "    if Table.HasColumns(SelectColumnsToKeep, \"statecode\") then",
          "      let",
          "        State = Table.NestedJoin(",
          "          SelectColumnsToKeep,",
          "          {\"statecode\"},",
          "          FilteredStateMetadata,",
          "          {\"State\"},",
          "          \"State Metadata\",",
          "          JoinKind.LeftOuter",
          "        ),",
          "        RenameStateLabelColumn = Table.ExpandTableColumn(",
          "          State,",
          "          \"State Metadata\",",
          "          {\"LocalizedLabel\"},",
          "          {\"State\"}",
          "        )",
          "      in",
          "        RenameStateLabelColumn",
          "    else",
          "      SelectColumnsToKeep,",
          "  //Add Status Column",
          "  AddStatus =",
          "    if Table.HasColumns(AddState, {\"statuscode\"}) then",
          "      let",
          "        Status = Table.NestedJoin(",
          "          AddState,",
          "          { \"statuscode\"},",
          "          FilteredStatusMetadata,",
          "          {\"Status\"},",
          "          \"Status Metadata\",",
          "          JoinKind.LeftOuter",
          "        ),",
          "        RenameStatusLabelColumn = Table.ExpandTableColumn(",
          "          Status,",
          "          \"Status Metadata\",",
          "          {\"LocalizedLabel\"},",
          "          {\"Status\"}",
          "        )",
          "      in",
          "        RenameStatusLabelColumn",
          "    else",
          "      AddState,",
          "  //Add Optionset Label Columns that are non null",
          "  AddOptionSetLabelColumns = fn_addOptions(",
          "    OptionSetColumnsToPopulate,",
          "    AddStatus,",
          "    FilteredOptionSets",
          "  ),",
          "  //Add Global Optionset Label Columns that are non null",
          "  AddGlobalOptionSetLabelColumns = fn_addOptions(",
          "    GlobalOptionSetColumnsToPopulate,",
          "    AddOptionSetLabelColumns,",
          "    FilteredGlobalOptionSets",
          "  ),",
          "  //Rename Columns",
          "  RenamePrimaryKeyColumn = Table.TransformColumnNames(",
          "    AddGlobalOptionSetLabelColumns,",
          "    each",
          "      if Text.EndsWith(_, DeltaLakeFolder & \"id\") and Text.StartsWith(_, DeltaLakeFolder & \"id\") then",
          "        \"PK_\" & _",
          "      else",
          "        _",
          "  ),",
          "  RenameForeignKeyColumns = Table.TransformColumnNames(",
          "    RenamePrimaryKeyColumn,",
          "    each if List.Contains(ForeignKeyList, _) then \"FK_\" & _ else _",
          "  ),",
          "  RenameGlobalOptionSetColumns = Table.TransformColumnNames(",
          "    RenameForeignKeyColumns,",
          "    each",
          "      if List.Contains(List.Distinct(Table.Column(FilteredGlobalOptionSets, \"OptionSetName\")), _) then",
          "        \"GOS_\" & _",
          "      else",
          "        _",
          "  ),",
          "  RenameOptionSetColumns = Table.TransformColumnNames(",
          "    RenameGlobalOptionSetColumns,",
          "    each",
          "      if List.Contains(List.Distinct(Table.Column(FilteredOptionSets, \"OptionSetName\")), _) then",
          "        \"OS_\" & _",
          "      else",
          "        _",
          "  ),",
          "  //Row Limiter",
          "  FilterRows =",
          "    if RowsLimit <= 0 then",
          "      RenameOptionSetColumns",
          "    else",
          "      Table.FirstN(RenameOptionSetColumns, RowsLimit),",
          "  //Update createdon text date field to +10 datetimezone to match other datetimezone columns.",
          "  UpdateCreatedOnTimeZone = if Table.HasColumns(FilterRows, \"CreatedOn\") then fn_addZone(FilterRows,\"CreatedOn\") ",
          "    else if Table.HasColumns(FilterRows, \"createdon\") then fn_addZone(FilterRows,\"createdon\")",
          "    else FilterRows",
          "  in",
          "    UpdateCreatedOnTimeZone,",
          "",
          "documentation = [",
          "        Documentation.Name =  \"fn_buildDeltaLakeTable\",",
          "        Documentation.Description = \"This Power Query function, named `fn_buildDeltaLakeTable`, is designed to create a table from a Delta Lake folder with additional transformations specifically tailored for working with Delta Lake folders and their associated metadata.\",",
          "        Documentation.LongDescription = \"This Power Query function, named `fn_buildDeltaLakeTable`, is designed to create a table from a Delta Lake folder with additional transformations specifically tailored for working with Delta Lake folders and their associated metadata. Only populates Option Sets and Global Option Set columns where a value exists other than null. For step by step description view documentation in code or Wiki\",",
          "        Documentation.Examples = {[Description =  \"Pass in the name of the Delta Table folder to the function in a new query.\",",
          "            Code = \"let",
          "    Source = fn_buildDeltaLakeTable(\"\"account\"\")",
          "in",
          "    Source\",",
          "            Result = \"Dataverse table with option column labels, columns named for easy identification ready for column selection and renaming.\"]",
          "        }",
          "    ]",
          "",
          "in",
          "    Value.ReplaceType(fn_buildDeltaLakeTable, Value.ReplaceMetadata(Value.Type(fn_buildDeltaLakeTable), documentation))",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "d1d477a3-ee77-47eb-8db9-c71e12cad033",
        "queryGroup": "Functions"
      },
      {
        "name": "fn_addZone",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let Source = ",
          "let fn_AddZone = (tableName as table, columnName as text) =>",
          "let",
          "    TimeZoneOffsetDuration = \"10:00\",",
          "    #\"Duplicated Column\" = Table.DuplicateColumn(tableName, columnName, \"DuplicatedColumn\"),",
          "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Duplicated Column\",{{\"DuplicatedColumn\", type datetimezone}}),",
          "    #\"Added Column\" = Table.AddColumn(#\"Changed Type\", columnName & \"_1\", each DateTimeZone.SwitchZone([DuplicatedColumn], Duration.Hours(Duration.FromText(TimeZoneOffsetDuration)), Duration.Minutes(Duration.FromText(TimeZoneOffsetDuration)))),",
          "    #\"Change Type1\" = Table.TransformColumnTypes(#\"Added Column\",{{columnName & \"_1\", type datetimezone}}),",
          "    #\"Removed Columns\" = Table.RemoveColumns(#\"Change Type1\", {columnName, \"DuplicatedColumn\"}),",
          "    RenameColumn = Table.RenameColumns(#\"Removed Columns\",{columnName & \"_1\", columnName})",
          "in",
          "    RenameColumn,",
          "",
          "    ",
          " documentation = [",
          "Documentation.Name =  \" fn_AddZone \",",
          "",
          "Documentation.LongDescription = \" Description: This Power Query function duplicates a specified column in a table, transforms its data type to datetimezone, and then switches its time zone based on the provided offset duration which is set to 10:00\",",
          "Documentation.Examples = {[Description =  \" To use the code in a query step pass in the two paramaters. ",
          "tableName: The input table containing the data.",
          "columnName: The name of the column with text value to be transformed.\",",
          "Code = \" let",
          "    resultTable = YourFunctionName(YourTableName, YourColumnName)",
          "in",
          "    resultTable\",",
          "Result = \" Column replaced with timezone.",
          "\"]}]",
          "",
          "in",
          "    Value.ReplaceType(fn_AddZone, Value.ReplaceMetadata(Value.Type(fn_AddZone), documentation))",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "29ac1e0a-dc7b-44cf-9d9e-72460d349f51",
        "queryGroup": "Functions\\Build Delta Lake Table"
      },
      {
        "name": "fn_buildDeltaLakeTableAll",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "/*",
          "This Power Query function, named `fn_buildDeltaLakeTableAll`, This Power Query function, named `fn_buildDeltaLakeTable`, is designed to create a table from a Delta Lake folder with additional transformations specifically tailored for working with Delta Lake folders and their associated metadata.:",
          "",
          "Function Parameters",
          "- DeltaLakeFolder: The function takes a single parameter, `DeltaLakeFolder`, which is expected to be a text value representing the Delta Lake folder.",
          "",
          "Main Function Steps",
          "1. Distinct ForeignKeyList:",
          "   - Reads metadata from the \"TargetMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Extracts distinct values from the \"AttributeName\" column.",
          "   - Creates a list named `ForeignKeyList` containing distinct foreign key attributes.",
          "",
          "2. Filtered Optionsets for DeltaLakeFolder:",
          "   - Reads metadata from the \"OptionsetMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns (\"EntityName\", \"OptionSetName\", \"Option\", \"LocalizedLabel\").",
          "   - Creates a table named `FilteredOptionSets` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "3. Filtered Global Optionsets for DeltaLakeFolder:",
          "   - Reads metadata from the \"GlobalOptionsetMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns, transforms the \"Option\" column to Int64.Type.",
          "   - Creates a table named `FilteredGlobalOptionSets` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "4. Filtered State Metadata for DeltaLakeFolder:",
          "   - Reads metadata from the \"StateMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns, transforms the \"State\" column to Int64.Type.",
          "   - Creates a table named `FilteredStateMetadata` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "5. Filtered Status Metadata for DeltaLakeFolder:",
          "   - Reads metadata from the \"StatusMetadata\" Delta Lake table for the specified `DeltaLakeFolder`.",
          "   - Selects specific columns, transforms the \"State\" column to Int64.Type.",
          "   - Creates a table named `FilteredStatusMetadata` containing filtered rows based on the `DeltaLakeFolder`.",
          "",
          "6. Add State Column:",
          "   - Checks if the table has a \"statecode\" column.",
          "   - If yes, performs a left outer join with the \"FilteredStateMetadata\" table on \"statecode\" and expands the \"LocalizedLabel\" column.",
          "   - Renames the expanded column to \"State\".",
          "",
          "7. Add Status Column:",
          "   - Checks if the table has \"statecode\" and \"statuscode\" columns.",
          "   - If yes, performs a left outer join with the \"FilteredStatusMetadata\" table on \"statecode\" and \"statuscode,\" then expands the \"LocalizedLabel\" column.",
          "   - Renames the expanded column to \"Status\".",
          "",
          "8. Add Optionset Label Columns:",
          "   - Calls a custom function `fn_addOptions` to add option set label columns based on distinct option set names.",
          "",
          "9. Add Global Optionset Label Columns:",
          "    - Calls the same custom function to add global option set label columns based on distinct global option set names.",
          "",
          "10. Rename Columns:",
          "    - Renames primary key columns with a prefix \"PK_\" if they match the pattern of `DeltaLakeFolder & \"id\"`.",
          "    - Renames foreign key columns with a prefix \"FK_\" if they are present in the `ForeignKeyList`.",
          "    - Adds prefixes \"GOS_\" and \"OS_\" to columns related to global and regular option sets, respectively.",
          "",
          "11. Row Limiter:",
          "    - Checks if a `RowsLimit` variable is defined and greater than 0.",
          "    - If true, limits the number of rows in the table to the specified `RowsLimit`.",
          "",
          "12. Update createdon text date field:",
          "    - Checks if the table has a \"CreatedOn\" column.",
          "    - Renames the \"CreatedOn\" column to \"createdon\" if present.",
          "    - Updates the time zone of the \"createdon\" column to UTC+10.",
          "",
          "13. Documentation:",
          "    - Includes documentation about the function, such as its name, description, author, and examples.",
          "",
          "14. Replace Function Type and Metadata:",
          "    - Uses `Value.ReplaceType` and `Value.ReplaceMetadata` to replace the function's type and metadata.",
          "",
          "### Documentation",
          "- The documentation provides information about the function's name, description, and examples of how to use the function in a query.",
          "*/",
          "",
          "let Source =",
          "",
          "let",
          "    // Define the function with a single text input parameter",
          "    fn_buildDeltaLakeTableAll = (ReadDeltaTable as table,TargetMetadata as table, OptionsetMetadata as table, GlobalOptionsetMetadata as table,StateMetadata as table,StatusMetadata as table, DeltaLakeFolder as text) =>",
          "",
          "let",
          "",
          "  //Parameters for Query",
          "  //DeltaLakeFolder = Delta_Lake_Folder,",
          "  //Distinct ForeignKeyList",
          "  ForeignKeyList = List.Distinct(",
          "    Table.Column(",
          "      Table.SelectRows(",
          "        TargetMetadata,",
          "        each ([EntityName] = DeltaLakeFolder)",
          "      ),",
          "      \"AttributeName\"",
          "    )",
          "  ),",
          "  //Filtered Optionset for DeltaLakeFolder",
          "  FilteredOptionSets = Table.SelectRows(",
          "    Table.SelectColumns(",
          "      OptionsetMetadata,",
          "      {\"EntityName\", \"OptionSetName\", \"Option\", \"LocalizedLabel\"}",
          "    ),",
          "    each ([EntityName] = DeltaLakeFolder)",
          "  ),",
          "  //Filtered Global Optionset for DeltaLakeFolder with Option Column Transform",
          "  FilteredGlobalOptionSets = Table.TransformColumnTypes(",
          "    Table.SelectRows(",
          "      Table.SelectColumns(",
          "        GlobalOptionsetMetadata,",
          "        {\"EntityName\", \"OptionSetName\", \"Option\", \"LocalizedLabel\"}",
          "      ),",
          "      each ([EntityName] = DeltaLakeFolder)",
          "    ),",
          "    {{\"Option\", Int64.Type}}",
          "  ),",
          "  //Filtered State Metadata for DeltaLakeFolder with State Column Transform",
          "  FilteredStateMetadata = Table.TransformColumnTypes(",
          "    Table.SelectColumns(",
          "      Table.SelectRows(",
          "        StateMetadata,",
          "        each ([EntityName] = DeltaLakeFolder)",
          "      ),",
          "      {\"State\", \"LocalizedLabel\"}",
          "    ),",
          "    {{\"State\", Int64.Type}}",
          "  ),",
          "  //Filtered Status Metadata for DeltaLakeFolder with State & Status Column Transform",
          "  FilteredStatusMetadata = Table.TransformColumnTypes(",
          "    Table.SelectColumns(",
          "      Table.SelectRows(",
          "        StatusMetadata,",
          "        each ([EntityName] = DeltaLakeFolder)",
          "      ),",
          "      {\"Status\", \"LocalizedLabel\"}",
          "    ),",
          "    {{\"Status\", Int64.Type}}",
          "  ),",
          "  //Start of building Source Delta Lake Table",
          "  //Add State Column",
          "  AddState =",
          "    if Table.HasColumns(ReadDeltaTable, \"statecode\") then",
          "      let",
          "        State = Table.NestedJoin(",
          "          ReadDeltaTable,",
          "          {\"statecode\"},",
          "          FilteredStateMetadata,",
          "          {\"State\"},",
          "          \"State Metadata\",",
          "          JoinKind.LeftOuter",
          "        ),",
          "        RenameStateLabelColumn = Table.ExpandTableColumn(",
          "          State,",
          "          \"State Metadata\",",
          "          {\"LocalizedLabel\"},",
          "          {\"State\"}",
          "        )",
          "      in",
          "        RenameStateLabelColumn",
          "    else",
          "      ReadDeltaTable,",
          "  //Add Status Column",
          "  AddStatus =",
          "    if Table.HasColumns(AddState, {\"statuscode\"}) then",
          "      let",
          "        Status = Table.NestedJoin(",
          "          AddState,",
          "          {\"statuscode\"},",
          "          FilteredStatusMetadata,",
          "          {\"Status\"},",
          "          \"Status Metadata\",",
          "          JoinKind.LeftOuter",
          "        ),",
          "        RenameStatusLabelColumn = Table.ExpandTableColumn(",
          "          Status,",
          "          \"Status Metadata\",",
          "          {\"LocalizedLabel\"},",
          "          {\"Status\"}",
          "        )",
          "      in",
          "        RenameStatusLabelColumn",
          "    else",
          "      AddState,",
          "  //Add Optionset Label Columns if they exist in table",
          "  AddOptionSetLabelColumns = fn_addOptions(",
          "    List.Select(",
          "      List.Distinct(Table.Column(FilteredOptionSets, \"OptionSetName\")),",
          "      each Table.HasColumns(ReadDeltaTable, _)",
          "    ),",
          "    AddStatus,",
          "    FilteredOptionSets",
          "  ),",
          "  //Add Global Optionset Label Columns if they exist in table",
          "  AddGlobalOptionSetLabelColumns = fn_addOptions(",
          "    List.Select(",
          "      List.Distinct(Table.Column(FilteredGlobalOptionSets, \"OptionSetName\")),",
          "      each Table.HasColumns(ReadDeltaTable, _)",
          "    ),",
          "    AddOptionSetLabelColumns,",
          "    FilteredGlobalOptionSets",
          "  ),",
          "  //Rename Columns",
          "  RenamePrimaryKeyColumn = Table.TransformColumnNames(",
          "    AddGlobalOptionSetLabelColumns,",
          "    each",
          "      if Text.EndsWith(_, DeltaLakeFolder & \"id\") and Text.StartsWith(_, DeltaLakeFolder & \"id\") then",
          "        \"PK_\" & _",
          "      else",
          "        _",
          "  ),",
          "  RenameForeignKeyColumns = Table.TransformColumnNames(",
          "    RenamePrimaryKeyColumn,",
          "    each if List.Contains(ForeignKeyList, _) then \"FK_\" & _ else _",
          "  ),",
          "  RenameGlobalOptionSetColumns = Table.TransformColumnNames(",
          "    RenameForeignKeyColumns,",
          "    each",
          "      if List.Contains(List.Distinct(Table.Column(FilteredGlobalOptionSets, \"OptionSetName\")), _) then",
          "        \"GOS_\" & _",
          "      else",
          "        _",
          "  ),",
          "  RenameOptionSetColumns = Table.TransformColumnNames(",
          "    RenameGlobalOptionSetColumns,",
          "    each",
          "      if List.Contains(List.Distinct(Table.Column(FilteredOptionSets, \"OptionSetName\")), _) then",
          "        \"OS_\" & _",
          "      else",
          "        _",
          "  ),",
          "  //Row Limiter",
          "  FilterRows =",
          "    if RowsLimit <= 0 then",
          "      RenameOptionSetColumns",
          "    else",
          "      Table.FirstN(RenameOptionSetColumns, RowsLimit),",
          "  //Update createdon text date field to +10 datetimezone to match other datetimezone columns.",
          "  UpdateCreatedOnTimeZone = if Table.HasColumns(FilterRows, \"CreatedOn\") then fn_addZone(FilterRows,\"CreatedOn\") ",
          "    else if Table.HasColumns(FilterRows, \"createdon\") then fn_addZone(FilterRows,\"createdon\")",
          "    else FilterRows",
          "  in",
          "    UpdateCreatedOnTimeZone,",
          "",
          "",
          " documentation = [",
          "        Documentation.Name =  \"fn_buildDeltaLakeTableAll\",",
          "        Documentation.Description = \"This Power Query function, named `fn_buildDeltaLakeTable`, is designed to create a table from a Delta Lake folder with additional transformations specifically tailored for working with Delta Lake folders and their associated metadata.\",",
          "        Documentation.LongDescription = \"This Power Query function, named `fn_buildDeltaLakeTable`, is designed to create a table from a Delta Lake folder with additional transformations specifically tailored for working with Delta Lake folders and their associated metadata. Populates All Option Sets and Global Option Set columns regardless whether all values are null. For step by step description view documentation in code or Wiki\",",
          "        Documentation.Examples = {[Description =  \"Pass in the name of the Delta Table folder to the function in a new query.\",",
          "            Code = \"let",
          "    Source = fn_buildDeltaLakeTableAll(\"\"account\"\")",
          "in",
          "    Source\",",
          "            Result = \"Dataverse table with option column labels, columns named for easy identification ready for column selection and renaming.\"]",
          "        }",
          "    ]",
          "",
          "in",
          "    Value.ReplaceType(fn_buildDeltaLakeTableAll, Value.ReplaceMetadata(Value.Type(fn_buildDeltaLakeTableAll), documentation))",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "8d3f8cdc-95d9-4fe7-91c6-147dfe8b8ab6",
        "queryGroup": "Functions"
      },
      {
        "name": "fn_dynamicsLink",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let Source =",
          "  let",
          "  fn_DynamicsLink = (source as table, entity as text, idColumn as text, generatedColumnName as text) =>",
          "    let AddLink = Table.AddColumn(",
          "      source,",
          "      generatedColumnName,",
          "      each @UnifyUrl",
          "        & \"main.aspx?appid=\"",
          "        & @UnifyAppId",
          "        & \"&pagetype=entityrecord&etn=\"",
          "        & entity",
          "        & \"&id=\"",
          "        & Record.Field(_, idColumn)",
          "    )",
          "    in AddLink,",
          "  ",
          " documentation = [",
          "Documentation.Name =  \"fn_DynamicsLink\",",
          "Documentation.LongDescription = \"The function uses `Table.AddColumn` to add a new column to the source table. The added column's values are generated using the `each` expression, which concatenates various elements to form a Dynamics link.\",",
          "Documentation.Examples = {[Description =  \" To use this function, you would call it with appropriate arguments, passing in your source table, entity type, id column name, and the desired name for the generated column.\",",
          "Code = \" fn_DynamicsLink(source,entity,idColumn,generatedColumnName) \",",
          "Result = \"The resulting column will contain Dynamics links based on the provided parameters.\"]}]",
          "",
          "in",
          "    Value.ReplaceType(fn_DynamicsLink, Value.ReplaceMetadata(Value.Type(fn_DynamicsLink), documentation))",
          "in",
          "    Source",
          "    ",
          "/*This function, named `fn_DynamicsLink`, is a parameterized function in Power Query M language. It takes four parameters:",
          "",
          "1. **source**: This is expected to be a table, representing the input data to which you want to add a new column.",
          "",
          "2. **entity**: A text parameter representing the entity type for the Dynamics link.",
          "",
          "3. **idColumn**: A text parameter specifying the name of the column in the source table that contains the unique identifier for each record.",
          "",
          "4. **generatedColumnName**: A text parameter specifying the name of the new column that will be added to the source table. This column will contain the dynamically generated Dynamics link based on the specified entity type and the unique identifier from the idColumn.",
          "",
          "The function uses `Table.AddColumn` to add a new column to the source table. The added column's values are generated using the `each` expression, which concatenates various elements to form a Dynamics link:",
          "",
          "- `@UnifyUrl`: A variable assumed to be available in the global scope, representing the base URL for the Dynamics link.",
          "- `@UnifyAppId`: Another variable assumed to be available in the global scope, representing the Dynamics App ID.",
          "- `entity`: The entity type passed as a parameter.",
          "- `Record.Field(_, idColumn)`: This part dynamically extracts the value of the idColumn from the current record in the source table.",
          "",
          "The resulting column will contain Dynamics links based on the provided parameters. To use this function, you would call it with appropriate arguments, passing in your source table, entity type, id column name, and the desired name for the generated column.*/"
        ],
        "kind": "m",
        "lineageTag": "903ff991-8ec7-4e4d-85f1-3e13b0f4cddc",
        "queryGroup": "Functions"
      },
      {
        "name": "UnifyUrl",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "expression": "\"https://unify-sit10.crm6.dynamics.com/\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "7867062f-a30a-4137-ba4b-0d8347ab9cfe",
        "queryGroup": "Parameters"
      },
      {
        "name": "UnifyAppId",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "expression": "\"10c27672-1354-e210-9469-00767c5ba5c4\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "2914f13e-c295-45f3-bdcb-0d77c573a9b7",
        "queryGroup": "Parameters"
      },
      {
        "name": "template_BuildDeltaLakeTable",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    DeltaLakeFolder = \"hs_courtoutcome\",",
          "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
          "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
          "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder)",
          "in",
          "",
          "BuildDeltaTable"
        ],
        "kind": "m",
        "lineageTag": "c7f7ce90-39b2-4447-ab8f-09579a2e037e",
        "queryGroup": "Model Data"
      },
      {
        "name": "template_BuildDeltaLakeTableAll",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    DeltaLakeFolder = \"hs_courtoutcome\",",
          "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
          "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
          "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    BuildDeltaTable = fn_buildDeltaLakeTableAll(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder)",
          "in",
          "",
          "BuildDeltaTable"
        ],
        "kind": "m",
        "lineageTag": "ab696ae0-226a-4684-8a1b-f56bcf11f9b4",
        "queryGroup": "Model Data"
      },
      {
        "name": "Interstate Child Protection Resquest",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    DeltaLakeFolder = \"hs_cs_interstatechildprotectionrequest\",",
          "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
          "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
          "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
          "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdon\", \"FK_hs_assignedto\", \"FK_hs_relatedcaseid\", \"FK_hs_requestingofficerid\", \"FK_hs_servicecentrelocationid\", \"hs_assignedtoname\", \"hs_dateofrequest\", \"hs_hasac4ssearchbeenconducted_label\", \"hs_hascphbeenpreviouslyrequested_label\", \"hs_id\", \"hs_name\", \"hs_possiblec4sreferencenumberjurisdiction\", \"hs_previousinterstateaddress\", \"hs_relatedcaseidname\", \"hs_requestid\", \"hs_requestingofficeridname\", \"hs_servicecentrelocationidname\", \"hs_title\", \"hs_urgentrequest_label\", \"modifiedon\", \"OS_hs_locationoftheexternalagencycode\", \"PK_hs_cs_interstatechildprotectionrequestid\", \"State\", \"Status\"}),",
          "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"createdon\", \"Created On\"}, {\"modifiedon\", \"Modified On\"}, {\"hs_assignedtoname\", \"Assigned To\"}, {\"hs_dateofrequest\", \"Date Of Request\"}, {\"hs_hasac4ssearchbeenconducted_label\", \"Has AC4S Search Been Conducted\"}, {\"hs_hascphbeenpreviouslyrequested_label\", \"Has CPH Been Previously Requested\"}}),",
          "    #\"Changed Type\" =  #\"Renamed Columns\",",
          "    #\"Add Created On Date Key\" = fn_addDateKey(#\"Changed Type\",\"Created On\"),",
          "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Add Created On Date Key\",{{\"hs_id\", \"ICP Id\"}, {\"hs_name\", \"ICP Name\"}, {\"Has AC4S Search Been Conducted\", \"Has a C4S Search Been Conducted\"}, {\"hs_possiblec4sreferencenumberjurisdiction\", \"Possible C4S Reference Number Jurisdiction\"}, {\"hs_previousinterstateaddress\", \"Previous Interstate Address\"}, {\"hs_relatedcaseidname\", \"Related Case Id\"}, {\"hs_requestid\", \"Request Id\"}, {\"hs_requestingofficeridname\", \"Requesting Officer Name\"}, {\"hs_servicecentrelocationidname\", \"Service Centre Location\"}, {\"hs_title\", \"Title\"}, {\"hs_urgentrequest_label\", \"Urgent Request\"}})",
          "in",
          "    #\"Renamed Columns1\""
        ],
        "kind": "m",
        "lineageTag": "4084bc2e-1692-4f35-b942-5751022a648b",
        "queryGroup": "Model Data"
      },
      {
        "name": "Police Referral",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    DeltaLakeFolder = \"hs_cs_policereferral\",",
          "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
          "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
          "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
          "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
          "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
          "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdon\", \"FK_hs_assignedto\", \"FK_hs_casetypeid\", \"FK_hs_centerid\", \"FK_hs_regardingid\", \"FK_hs_relatedcaseid\", \"hs_assignedtoname\", \"hs_casetypeidname\", \"hs_centeridname\", \"hs_centerphone\", \"hs_emailtotext\", \"hs_isccr_label\", \"hs_iscsresponseother_label\", \"hs_isform27orform28_label\", \"hs_isintakeenquiry_label\", \"hs_isnotification_label\", \"hs_name\", \"hs_policereferralid\", \"hs_regardingidname\", \"hs_relatedcaseidname\", \"hs_unifycaseid\", \"modifiedon\", \"PK_hs_cs_policereferralid\", \"State\", \"Status\"}),",
          "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"createdon\", \"Created On\"}, {\"hs_assignedtoname\", \"Assigned To\"}, {\"hs_casetypeidname\", \"Case Type\"}, {\"hs_centeridname\", \"Center Name\"}, {\"hs_centerphone\", \"Center Phone\"}, {\"hs_emailtotext\", \"Email To Text\"}, {\"hs_isccr_label\", \"Is CCR\"}, {\"hs_iscsresponseother_label\", \"Is CS Response Other\"}, {\"hs_isform27orform28_label\", \"Is Form 27 Or Form 28\"}, {\"hs_isintakeenquiry_label\", \"Is Intake Enquiry\"}, {\"hs_isnotification_label\", \"Is Notification\"}, {\"hs_name\", \"Police Referral Name\"}, {\"hs_policereferralid\", \"Police Referral Id\"}, {\"hs_regardingidname\", \"Regarding Id\"}, {\"hs_relatedcaseidname\", \"Related Case Id\"}, {\"hs_unifycaseid\", \"Unify Case Id\"}, {\"modifiedon\", \"Modified On\"}}),",
          "    #\"Changed Type\" =  #\"Renamed Columns\",",
          "    #\"Add Created On Date Key\" = fn_addDateKey(#\"Changed Type\",\"Created On\")",
          "in",
          "    #\"Add Created On Date Key\""
        ],
        "kind": "m",
        "lineageTag": "bca0c811-4b62-4dc5-9693-dff88697c7be",
        "queryGroup": "Model Data"
      }
    ],
    "queryGroups": [
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Functions"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Parameters"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "3"
          }
        ],
        "folder": "Model Data"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "description": "Functions to support main functions to Build Delta Lake Table",
        "folder": "Functions\\Build Delta Lake Table"
      }
    ],
    "relationships": [
      {
        "name": "b0fdf010-112a-4b9f-9f4b-571c3caf89e8",
        "fromColumn": "FK_hs_relatedcase",
        "fromTable": "Involved Person",
        "toColumn": "PK_hs_csri_intakeid",
        "toTable": "CSRI Intake"
      },
      {
        "name": "f81846dd-9578-4175-a4f6-4259efff6f96",
        "fromColumn": "FK_hs_relevantparty",
        "fromTable": "Involved Person",
        "toColumn": "PK_contactid",
        "toTable": "Contact"
      },
      {
        "name": "a21e77ad-492e-a02d-45e3-b2bf7906c7b4",
        "fromColumn": "DKey_Created On",
        "fromTable": "CSRI Intake",
        "toColumn": "DKey",
        "toTable": "Date Table"
      },
      {
        "name": "cc2a9811-7c87-4fed-b075-5e56e2a903eb",
        "crossFilteringBehavior": "bothDirections",
        "fromCardinality": "one",
        "fromColumn": "PK_hs_csri_intakeid",
        "fromTable": "CSRI Intake",
        "toColumn": "FK_hs_intakeid",
        "toTable": "CSRI Notifier Contact Detail"
      },
      {
        "name": "420ca2aa-a5d8-4bff-8255-9f6e1891e5d7",
        "fromColumn": "FK_hs_person",
        "fromTable": "Linked Address",
        "toColumn": "PK_contactid",
        "toTable": "Contact"
      }
    ],
    "sourceQueryCulture": "en-AU",
    "tables": [
      {
        "name": "Data Refresh",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "RefreshDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "48b927f2-1f4c-44dc-8baa-f44d2d8d5d0d",
            "sourceColumn": "RefreshDate",
            "summarizeBy": "none"
          },
          {
            "name": "Last Updated",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "expression": [
              "",
              "     \"Last Update on \" ",
              "     & UNICHAR(10) ",
              "     & FORMAT(",
              "         MAX('Data Refresh'[RefreshDate]),",
              "         \"MMM DD, YYYY H:MM AM/PM\"",
              "     )"
            ],
            "isDataTypeInferred": true,
            "lineageTag": "760cd8a4-7bed-475a-a2b8-7c71ed496aae",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "lineageTag": "82379d4e-0caa-43e5-9c07-e4c746f55f1f",
        "measures": [
          {
            "name": "Last Refreshed",
            "expression": [
              "",
              "     \" \" ",
              "     & UNICHAR(10) ",
              "     & FORMAT(",
              "         MAX('Data Refresh'[RefreshDate]),",
              "         \"DD/MM/YYYY H:MM AM/PM\"",
              "     )"
            ],
            "lineageTag": "cb07f704-772e-40b0-9271-a697402766d4"
          },
          {
            "name": "Time Viewed",
            "expression": "UTCNOW()+10/24",
            "formatString": "General Date",
            "lineageTag": "3f24ff21-f856-42c9-917b-a414c51a763d"
          },
          {
            "name": "User Name",
            "expression": "USERNAME()",
            "lineageTag": "bf282534-1e2a-43a5-ab21-9f5886c3c447"
          },
          {
            "name": "User Principal",
            "expression": "USERPRINCIPALNAME()",
            "lineageTag": "647085ae-6209-497f-b118-0d4ddd12cf29"
          }
        ],
        "partitions": [
          {
            "name": "Data Refresh",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMtQ31DcyMDJS0oEyTQ2UYmMB\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [dtDSTStart = _t, dtDSTEnd = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source, {{\"dtDSTStart\", type date}, {\"dtDSTEnd\", type date}}, \"en-AU\"),",
                "    varCurrentDate = DateTime.Date(DateTimeZone.SwitchZone(DateTimeZone.LocalNow(),9)),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each [dtDSTStart] < varCurrentDate and [dtDSTEnd] > varCurrentDate),",
                "    varDSTOffset = Table.RowCount(#\"Filtered Rows\"),",
                "    #\"Last Refresh Date\" = #table(",
                "        type table",
                "            [",
                "                #\"RefreshDate\"=datetimezone",
                "            ],",
                "        {",
                "            {DateTimeZone.SwitchZone(DateTimeZone.LocalNow(),9 + varDSTOffset,0)}",
                "        }",
                "        ),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Last Refresh Date\",{{\"RefreshDate\", type datetimezone}})",
                "in",
                "    #\"Changed Type1\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Date Table",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Short Date",
            "isKey": true,
            "lineageTag": "c709d633-d13e-471d-aa8b-8ff5a3951fae",
            "sourceColumn": "Date",
            "summarizeBy": "none"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "ed267868-590a-4025-bf01-34d14b39aae1",
            "sourceColumn": "Year",
            "summarizeBy": "none"
          },
          {
            "name": "Start of Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "92c1d2e6-7269-4460-84f8-0427d5ac25a7",
            "sourceColumn": "Start of Year",
            "summarizeBy": "none"
          },
          {
            "name": "End of Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "f4d0c6ce-1470-4108-a4e5-c61dc5b6a8ce",
            "sourceColumn": "End of Year",
            "summarizeBy": "none"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "af5b2fd5-0d0b-4d65-8417-5c5ecc49f9c5",
            "sourceColumn": "Month",
            "summarizeBy": "none"
          },
          {
            "name": "Start of Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "12c68097-d625-4531-99d3-5f913433a954",
            "sourceColumn": "Start of Month",
            "summarizeBy": "none"
          },
          {
            "name": "End of Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "cea835f5-621d-47d6-b61a-1fef64d18635",
            "sourceColumn": "End of Month",
            "summarizeBy": "none"
          },
          {
            "name": "Days in Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "71e32383-505c-4714-8293-58d3f25863d7",
            "sourceColumn": "Days in Month",
            "summarizeBy": "none"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "3c818a32-b1b4-495c-b2ae-fb341d0880f2",
            "sourceColumn": "Day",
            "summarizeBy": "none"
          },
          {
            "name": "Day Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "SortByColumn"
              }
            ],
            "dataType": "string",
            "lineageTag": "b496dcbf-8648-4814-b1ba-a38d7ab8318a",
            "sortByColumn": "Day of Week",
            "sourceColumn": "Day Name",
            "summarizeBy": "none"
          },
          {
            "name": "Day of Week",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c94948ec-44bc-4b13-853d-71b7920198dd",
            "sourceColumn": "Day of Week",
            "summarizeBy": "none"
          },
          {
            "name": "Day of Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f06734d3-2df6-431c-adef-98a009e3f8f9",
            "sourceColumn": "Day of Year",
            "summarizeBy": "none"
          },
          {
            "name": "Month Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "SortByColumn"
              }
            ],
            "dataType": "string",
            "lineageTag": "03962d11-d38b-4a21-bc10-8c5cfd80beb8",
            "sortByColumn": "Month",
            "sourceColumn": "Month Name",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "09bab9ab-f002-477b-9d6a-c216068cc8e5",
            "sourceColumn": "Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Start of Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "ac6e5449-32fc-48e0-9a13-d499a9a35ad2",
            "sourceColumn": "Start of Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "End of Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "dbe52c79-b8d5-441e-8a9b-a37c700b6657",
            "sourceColumn": "End of Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Week of Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "729e0711-43f9-4370-905a-6a8e3a327faa",
            "sourceColumn": "Week of Year",
            "summarizeBy": "none"
          },
          {
            "name": "Week of Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "2c7efb73-ec80-41ab-b779-f174c300c4f3",
            "sourceColumn": "Week of Month",
            "summarizeBy": "none"
          },
          {
            "name": "Start of Week",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "2c47513c-a57f-41d4-bdc3-ae75f33501d9",
            "sourceColumn": "Start of Week",
            "summarizeBy": "none"
          },
          {
            "name": "End of Week",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Date"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Date",
            "lineageTag": "f88a4659-d677-43e3-ba09-96878e2baf80",
            "sourceColumn": "End of Week",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "67c0a957-3232-4b33-8183-bdf386a37549",
            "sourceColumn": "Fiscal Year",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "1f5d7b86-278c-478c-a783-f3dd8f8df035",
            "sourceColumn": "Fiscal Quarter",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "155671e6-279f-4cc6-bfdd-53e5ff4abf19",
            "sourceColumn": "Fiscal Month",
            "summarizeBy": "none"
          },
          {
            "name": "Day Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "5e1f0195-2417-48c7-8b2a-8c1331a33c9e",
            "sourceColumn": "Day Offset",
            "summarizeBy": "none"
          },
          {
            "name": "Month Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "0b13e119-61ac-46d6-9fc4-27ead28b0c62",
            "sourceColumn": "Month Offset",
            "summarizeBy": "none"
          },
          {
            "name": "Year Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c4f0a7ba-e8d5-48be-804e-b4e896aa6a15",
            "sourceColumn": "Year Offset",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter Offset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "be97e7c7-1954-4250-9513-f5ac730a4c90",
            "sourceColumn": "Quarter Offset",
            "summarizeBy": "none"
          },
          {
            "name": "Year-Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "SortByColumn"
              }
            ],
            "dataType": "string",
            "lineageTag": "e6a78f90-b5f8-4a6a-b7bb-d288885dc5fa",
            "sortByColumn": "Year-Month Code",
            "sourceColumn": "Year-Month",
            "summarizeBy": "none"
          },
          {
            "name": "Year-Month Code",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "f593668e-34fc-4955-8f83-e978ac7d3faf",
            "sourceColumn": "Year-Month Code",
            "summarizeBy": "none"
          },
          {
            "name": "DKey",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "1c8d459f-598f-4423-a856-444051ebfa08",
            "sourceColumn": "DKey",
            "summarizeBy": "none"
          },
          {
            "name": "Quarter Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "SortByColumn"
              }
            ],
            "dataType": "string",
            "lineageTag": "06a4a6b0-e26b-4494-9e37-1f1369c96e71",
            "sortByColumn": "Quarter",
            "sourceColumn": "Quarter Name",
            "summarizeBy": "none"
          },
          {
            "name": "Fiscal Quarter Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "SortByColumn"
              }
            ],
            "dataType": "string",
            "lineageTag": "7f54c488-f8f8-459f-9f85-35fedf1f15c0",
            "sortByColumn": "Fiscal Quarter",
            "sourceColumn": "Fiscal Quarter Name",
            "summarizeBy": "none"
          }
        ],
        "dataCategory": "Time",
        "lineageTag": "af749cc8-295a-4a68-8515-3a41eb6d0bf4",
        "partitions": [
          {
            "name": "Date Table",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    // configurations start",
                "    Today=Date.From(DateTime.LocalNow()), // today's date",
                "    FromYear = 1970, // set the start year of the date dimension. dates start from 1st of January of this year",
                "    ToYear=2030, // set the end year of the date dimension. dates end at 31st of December of this year",
                "    StartofFiscalYear=7, // set the month number that is start of the financial year. example; if fiscal year start is July, value is 7",
                "    firstDayofWeek=Day.Sunday, // set the week's start day, values: Day.Monday, Day.Sunday....",
                "    // configuration end",
                "    FromDate=#date(FromYear,1,1),",
                "    ToDate=#date(ToYear,12,31),",
                "    Source=List.Dates(",
                "        FromDate,",
                "        Duration.Days(ToDate-FromDate)+1,",
                "        #duration(1,0,0,0)",
                "    ),",
                "    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Converted to Table\",{{\"Column1\", \"Date\"}}),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Date\", type date}}),",
                "    #\"Inserted Year\" = Table.AddColumn(#\"Changed Type\", \"Year\", each Date.Year([Date]), Int64.Type),",
                "    #\"Inserted Start of Year\" = Table.AddColumn(#\"Inserted Year\", \"Start of Year\", each Date.StartOfYear([Date]), type date),",
                "    #\"Inserted End of Year\" = Table.AddColumn(#\"Inserted Start of Year\", \"End of Year\", each Date.EndOfYear([Date]), type date),",
                "    #\"Inserted Month\" = Table.AddColumn(#\"Inserted End of Year\", \"Month\", each Date.Month([Date]), Int64.Type),",
                "    #\"Inserted Start of Month\" = Table.AddColumn(#\"Inserted Month\", \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
                "    #\"Inserted End of Month\" = Table.AddColumn(#\"Inserted Start of Month\", \"End of Month\", each Date.EndOfMonth([Date]), type date),",
                "    #\"Inserted Days in Month\" = Table.AddColumn(#\"Inserted End of Month\", \"Days in Month\", each Date.DaysInMonth([Date]), Int64.Type),",
                "    #\"Inserted Day\" = Table.AddColumn(#\"Inserted Days in Month\", \"Day\", each Date.Day([Date]), Int64.Type),",
                "    #\"Inserted Day Name\" = Table.AddColumn(#\"Inserted Day\", \"Day Name\", each Date.DayOfWeekName([Date]), type text),",
                "    #\"Inserted Day of Week\" = Table.AddColumn(#\"Inserted Day Name\", \"Day of Week\", each Date.DayOfWeek([Date],firstDayofWeek), Int64.Type),",
                "    #\"Inserted Day of Year\" = Table.AddColumn(#\"Inserted Day of Week\", \"Day of Year\", each Date.DayOfYear([Date]), Int64.Type),",
                "    #\"Inserted Month Name\" = Table.AddColumn(#\"Inserted Day of Year\", \"Month Name\", each Date.MonthName([Date]), type text),",
                "    #\"Inserted Quarter\" = Table.AddColumn(#\"Inserted Month Name\", \"Quarter\", each Date.QuarterOfYear([Date]), Int64.Type),",
                "    #\"Inserted Start of Quarter\" = Table.AddColumn(#\"Inserted Quarter\", \"Start of Quarter\", each Date.StartOfQuarter([Date]), type date),",
                "    #\"Inserted End of Quarter\" = Table.AddColumn(#\"Inserted Start of Quarter\", \"End of Quarter\", each Date.EndOfQuarter([Date]), type date),",
                "    #\"Inserted Week of Year\" = Table.AddColumn(#\"Inserted End of Quarter\", \"Week of Year\", each Date.WeekOfYear([Date],firstDayofWeek), Int64.Type),",
                "    #\"Inserted Week of Month\" = Table.AddColumn(#\"Inserted Week of Year\", \"Week of Month\", each Date.WeekOfMonth([Date],firstDayofWeek), Int64.Type),",
                "    #\"Inserted Start of Week\" = Table.AddColumn(#\"Inserted Week of Month\", \"Start of Week\", each Date.StartOfWeek([Date],firstDayofWeek), type date),",
                "    #\"Inserted End of Week\" = Table.AddColumn(#\"Inserted Start of Week\", \"End of Week\", each Date.EndOfWeek([Date],firstDayofWeek), type date),",
                "    FiscalMonthBaseIndex=13-StartofFiscalYear,",
                "    adjustedFiscalMonthBaseIndex=if(FiscalMonthBaseIndex>=12 or FiscalMonthBaseIndex<0) then 0 else FiscalMonthBaseIndex,",
                "    #\"Added Custom\" = Table.AddColumn(#\"Inserted End of Week\", \"FiscalBaseDate\", each Date.AddMonths([Date],adjustedFiscalMonthBaseIndex)),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"FiscalBaseDate\", type date}}),",
                "    #\"Inserted Year1\" = Table.AddColumn(#\"Changed Type1\", \"Year.1\", each Date.Year([FiscalBaseDate]), Int64.Type),",
                "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Year1\",{{\"Year.1\", \"Fiscal Year\"}}),",
                "    #\"Inserted Quarter1\" = Table.AddColumn(#\"Renamed Columns1\", \"Quarter.1\", each Date.QuarterOfYear([FiscalBaseDate]), Int64.Type),",
                "    #\"Renamed Columns2\" = Table.RenameColumns(#\"Inserted Quarter1\",{{\"Quarter.1\", \"Fiscal Quarter\"}}),",
                "    #\"Inserted Month1\" = Table.AddColumn(#\"Renamed Columns2\", \"Month.1\", each Date.Month([FiscalBaseDate]), Int64.Type),",
                "    #\"Renamed Columns3\" = Table.RenameColumns(#\"Inserted Month1\",{{\"Month.1\", \"Fiscal Month\"}}),",
                "    #\"Removed Columns\" = Table.RemoveColumns(#\"Renamed Columns3\",{\"FiscalBaseDate\"}),",
                "    #\"Inserted Age\" = Table.AddColumn(#\"Removed Columns\", \"Age\", each [Date]-Today, type duration),",
                "    #\"Extracted Days\" = Table.TransformColumns(#\"Inserted Age\",{{\"Age\", Duration.Days, Int64.Type}}),",
                "    #\"Renamed Columns4\" = Table.RenameColumns(#\"Extracted Days\",{{\"Age\", \"Day Offset\"}}),",
                "    #\"Added Custom1\" = Table.AddColumn(#\"Renamed Columns4\", \"Month Offset\", each (([Year]-Date.Year(Today))*12)",
                "+([Month]-Date.Month(Today))),",
                "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Added Custom1\",{{\"Month Offset\", Int64.Type}}),",
                "    #\"Added Custom2\" = Table.AddColumn(#\"Changed Type2\", \"Year Offset\", each [Year]-Date.Year(Today)),",
                "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Added Custom2\",{{\"Year Offset\", Int64.Type}}),",
                "    #\"Added Custom3\" = Table.AddColumn(#\"Changed Type3\", \"Quarter Offset\", each (([Year]-Date.Year(Today))*4)",
                "+([Quarter]-Date.QuarterOfYear(Today))),",
                "    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Added Custom3\",{{\"Quarter Offset\", Int64.Type}}),",
                "    #\"Added Custom4\" = Table.AddColumn(#\"Changed Type4\", \"Year-Month\", each Date.ToText([Date],\"MMM yyyy\")),",
                "    #\"Added Custom5\" = Table.AddColumn(#\"Added Custom4\", \"Year-Month Code\", each Date.ToText([Date],\"yyyyMM\")),",
                "    #\"Changed Type5\" = Table.TransformColumnTypes(#\"Added Custom5\",{{\"Year-Month\", type text}, {\"Year-Month Code\", Int64.Type}}),",
                "    #\"Added DateKey\" = Table.AddColumn(#\"Changed Type5\", \"DKey\", each Date.ToText([Date],\"yyyyMMdd\")),",
                "    #\"Changed Type6\" = Table.TransformColumnTypes(#\"Added DateKey\",{{\"DKey\", Int64.Type}}),",
                "    #\"Added Quarter Name\" = Table.AddColumn(#\"Changed Type6\", \"Quarter Name\", each \"Q\" & Number.ToText([Quarter])),",
                "    #\"Added Fiscal Quarter Name\" = Table.AddColumn(#\"Added Quarter Name\", \"Fiscal Quarter Name\", each \"FQ\" & Number.ToText([Fiscal Quarter]))",
                "in",
                "    #\"Added Fiscal Quarter Name\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CSRI Intake",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Advice to Notifiers",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8ffbdd71-b552-4eb3-854b-85903afccf27",
            "sourceColumn": "Advice to Notifiers",
            "summarizeBy": "none"
          },
          {
            "name": "Case Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "db0571d9-2d12-44b7-9bde-4325aac9fb1e",
            "sourceColumn": "Case Type",
            "summarizeBy": "none"
          },
          {
            "name": "Departmental History Information",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b3db47dd-2d42-44a9-931d-d109b6d78ce7",
            "sourceColumn": "Departmental History Information",
            "summarizeBy": "none"
          },
          {
            "name": "Intake ID",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4196e713-ca14-4a2e-8737-9010b8b1ffb3",
            "sourceColumn": "Intake ID",
            "summarizeBy": "none"
          },
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1c061ab8-779b-4db1-984f-67ceda0de727",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Notifier Concerns",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7d5c0034-dac1-4f88-98c6-f7473fa3bd44",
            "sourceColumn": "Notifier Concerns",
            "summarizeBy": "none"
          },
          {
            "name": "Other Relevant Information",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ac511205-f412-4687-a85d-0f14baef8a73",
            "sourceColumn": "Other Relevant Information",
            "summarizeBy": "none"
          },
          {
            "name": "Receiving Officer",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "dcf8386b-8f98-429a-bd33-43198642cb37",
            "sourceColumn": "Receiving Officer",
            "summarizeBy": "none"
          },
          {
            "name": "Title",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d8d29761-cb4e-417c-b851-6a29b38556a8",
            "sourceColumn": "Title",
            "summarizeBy": "none"
          },
          {
            "name": "State",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ad2b04e2-3027-4c20-b262-005cd7d0735f",
            "sourceColumn": "State",
            "summarizeBy": "none"
          },
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "63be7eb5-bd93-4d72-8e79-681cd4fca2e5",
            "sourceColumn": "Status",
            "summarizeBy": "none"
          },
          {
            "name": "Police Referral Completed",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "184802c5-90ad-41d7-a2ae-7c2f61dd62c3",
            "sourceColumn": "Police Referral Completed",
            "summarizeBy": "none"
          },
          {
            "name": "PK_hs_csri_intakeid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "62822a0f-c4a9-4cfa-9435-edda7c73e542",
            "sourceColumn": "PK_hs_csri_intakeid",
            "summarizeBy": "none"
          },
          {
            "name": "Modified On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "d8d5e870-ebde-4e82-8891-0b533c9cfa4c",
            "sourceColumn": "Modified On",
            "summarizeBy": "none"
          },
          {
            "name": "Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "29f0fe32-9d76-49b3-8d11-78f4da39da88",
            "sourceColumn": "Created On",
            "summarizeBy": "none"
          },
          {
            "name": "DKey_Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "b290a75d-23ee-4158-af30-e7b97dba4430",
            "sourceColumn": "DKey_Created On",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_centre",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7603cd7e-3075-4b2e-b58f-37d4ae628735",
            "sourceColumn": "FK_hs_centre",
            "summarizeBy": "none"
          },
          {
            "name": "Additional Information",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d15983ce-6365-4c8a-92a3-227f90a48731",
            "sourceColumn": "Additional Information",
            "summarizeBy": "none"
          },
          {
            "name": "Additional Information Needed?",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a1992e84-5d31-4d9c-bb38-54f500530196",
            "sourceColumn": "Additional Information Needed?",
            "summarizeBy": "none"
          },
          {
            "name": "Are Parental Circumstances Events Exist?",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "61b0e56a-6b13-4456-ac89-eb9640684959",
            "sourceColumn": "Are Parental Circumstances Events Exist?",
            "summarizeBy": "none"
          },
          {
            "name": "Assigned To",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "727a25c0-dbab-457a-9bb6-817811ad923d",
            "sourceColumn": "Assigned To",
            "summarizeBy": "none"
          },
          {
            "name": "CCR Response",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ed99ece0-7278-4c04-b9e4-7955a0cefe99",
            "sourceColumn": "CCR Response",
            "summarizeBy": "none"
          },
          {
            "name": "Check Cumulative Harm",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "07a062f5-1cc1-425d-8c27-99f51918c2fc",
            "sourceColumn": "Check Cumulative Harm",
            "summarizeBy": "none"
          },
          {
            "name": "Child Likely Experience Harm Next 24 Hours",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "091074ae-3f3e-410a-8dfa-5aaaa9759617",
            "sourceColumn": "Child Likely Experience Harm Next 24 Hours",
            "summarizeBy": "none"
          },
          {
            "name": "Cumulative Harm Comments",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d8db5b0c-64c0-4136-8a50-ecfafe1dc840",
            "sourceColumn": "Cumulative Harm Comments",
            "summarizeBy": "none"
          },
          {
            "name": "Does the Child Require Urgent Medical Attention?",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e02aea15-0726-4141-b9c8-8d033a7e8941",
            "sourceColumn": "Does the Child Require Urgent Medical Attention?",
            "summarizeBy": "none"
          },
          {
            "name": "Family Likely to Flee to Avoid Contact",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d584684b-8e38-477e-b519-046f56d0d28e",
            "sourceColumn": "Family Likely to Flee to Avoid Contact",
            "summarizeBy": "none"
          },
          {
            "name": "Immediate Contact Nessesary for Harm Info",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "297faa2d-a48b-4838-b83f-a9c40bfad3cd",
            "sourceColumn": "Immediate Contact Nessesary for Harm Info",
            "summarizeBy": "none"
          },
          {
            "name": "Intake Response",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b1f4de85-524d-4bf5-88a8-d833e22d5998",
            "sourceColumn": "Intake Response",
            "summarizeBy": "none"
          },
          {
            "name": "Is Intake Enquiry",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c1770cad-6237-4938-832d-ea06a782e99b",
            "sourceColumn": "Is Intake Enquiry",
            "summarizeBy": "none"
          },
          {
            "name": "Is Pattern of Harm Exist",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a9267bbc-984f-4150-b5c6-765f10c7b46b",
            "sourceColumn": "Is Pattern of Harm Exist",
            "summarizeBy": "none"
          },
          {
            "name": "Notification Response Decision",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "3029a401-8f59-485a-8403-98884faa595f",
            "sourceColumn": "Notification Response Decision",
            "summarizeBy": "none"
          },
          {
            "name": "Notification Response Timeframe",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1ba28033-7e81-4250-a9eb-195c8ab8abdc",
            "sourceColumn": "Notification Response Timeframe",
            "summarizeBy": "none"
          },
          {
            "name": "Protection Advice Action Taken",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c56ece12-d6ee-41e2-ba18-0690c802586e",
            "sourceColumn": "Protection Advice Action Taken",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "aa3306e9-b126-42c2-8522-9126e0d41aa9",
        "partitions": [
          {
            "name": "CSRI Intake",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    DeltaLakeFolder = \"hs_csri_intake\",",
                "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
                "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
                "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
                "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdon\", \"FK_hs_centre\", \"hs_additionalinformation\", \"hs_additionalinformationneededcode_label\", \"hs_advicetonotifiers\", \"hs_areparentalcircumstanceseventsexist_label\", \"hs_assignedtoidname\", \"hs_casetyperefname\", \"hs_ccrresponsecode_label\", \"hs_checkcumulativeharm_label\", \"hs_childlikelyexperienceharmnext24hourscode_label\", \"hs_cumulativeharmcomments\", \"hs_departmentalhistoryinformation\", \"hs_doesthechildrequireurgentmedicalattncode_label\", \"hs_familylikelytofleetoavoidcontactcode_label\", \"hs_immediatecontactnessesaryforharminfocode_label\", \"hs_intakenumber\", \"hs_intakeresponsecode_label\", \"hs_isintakeenquirycode_label\", \"hs_ispatternofharmexist_label\", \"hs_name\", \"hs_notificationresponsedecision_label\", \"hs_notificationresponsetimeframecode_label\", \"hs_notifierconcerns\", \"hs_otherrelevantinformation\", \"hs_policereferralcompletedcode_label\", \"hs_protectionadviceactiontaken\", \"hs_receivingofficeridname\", \"hs_title\", \"modifiedon\", \"PK_hs_csri_intakeid\", \"State\", \"Status\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"hs_advicetonotifiers\", \"Advice to Notifiers\"}, {\"hs_casetyperefname\", \"Case Type\"}, {\"hs_departmentalhistoryinformation\", \"Departmental History Information\"}, {\"hs_intakenumber\", \"Intake ID\"}, {\"hs_name\", \"Name\"}, {\"hs_notifierconcerns\", \"Notifier Concerns\"}, {\"hs_otherrelevantinformation\", \"Other Relevant Information\"}, {\"hs_policereferralcompletedcode_label\", \"Police Referral Completed\"}, {\"hs_receivingofficeridname\", \"Receiving Officer\"}, {\"hs_title\", \"Title\"}, {\"modifiedon\", \"Modified On\"}, {\"createdon\", \"Created On\"}, {\"hs_additionalinformation\", \"Additional Information\"}, {\"hs_additionalinformationneededcode_label\", \"Additional Information Needed?\"}, {\"hs_areparentalcircumstanceseventsexist_label\", \"Are Parental Circumstances Events Exist?\"}, {\"hs_assignedtoidname\", \"Assigned To\"}, {\"hs_ccrresponsecode_label\", \"CCR Response\"}, {\"hs_checkcumulativeharm_label\", \"Check Cumulative Harm\"}, {\"hs_childlikelyexperienceharmnext24hourscode_label\", \"Child Likely Experience Harm Next 24 Hours\"}, {\"hs_cumulativeharmcomments\", \"Cumulative Harm Comments\"}, {\"hs_doesthechildrequireurgentmedicalattncode_label\", \"Does the Child Require Urgent Medical Attention?\"}, {\"hs_familylikelytofleetoavoidcontactcode_label\", \"Family Likely to Flee to Avoid Contact\"}, {\"hs_intakeresponsecode_label\", \"Intake Response\"}, {\"hs_isintakeenquirycode_label\", \"Is Intake Enquiry\"}, {\"hs_ispatternofharmexist_label\", \"Is Pattern of Harm Exist\"}, {\"hs_notificationresponsedecision_label\", \"Notification Response Decision\"}, {\"hs_notificationresponsetimeframecode_label\", \"Notification Response Timeframe\"}, {\"hs_immediatecontactnessesaryforharminfocode_label\", \"Immediate Contact Nessesary for Harm Info\"}, {\"hs_protectionadviceactiontaken\", \"Protection Advice Action Taken\"}}),",
                "    #\"Add Created On Date Key\" = fn_addDateKey(#\"Renamed Columns\", \"Created On\")",
                "in",
                "",
                "#\"Add Created On Date Key\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CSRI Limited Intake Response",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Agency Details",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "07a69e0c-db5c-47d5-94e7-e58acb779aff",
            "sourceColumn": "Agency Details",
            "summarizeBy": "none"
          },
          {
            "name": "Date Received",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "f91afe53-6e6a-41f8-9f86-a52e0c3d3e1d",
            "sourceColumn": "Date Received",
            "summarizeBy": "none"
          },
          {
            "name": "Family Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a8a97c94-09ad-4d29-9cf5-6e15bc21a9c8",
            "sourceColumn": "Family Name",
            "summarizeBy": "none"
          },
          {
            "name": "Limited Intake Response Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d4488b0d-f6c2-4971-90c0-275fdfced829",
            "sourceColumn": "Limited Intake Response Number",
            "summarizeBy": "none"
          },
          {
            "name": "Title",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "986b2393-5271-46b2-b750-e2d02c30cd7f",
            "sourceColumn": "Title",
            "summarizeBy": "none"
          },
          {
            "name": "Person Receiving Information",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5fd8d06d-a906-4eec-a74a-ce38a5b042db",
            "sourceColumn": "Person Receiving Information",
            "summarizeBy": "none"
          },
          {
            "name": "Contains No Allegations of Harm",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d9e6424b-45da-4e85-b432-51ad8a164070",
            "sourceColumn": "Contains No Allegations of Harm",
            "summarizeBy": "none"
          },
          {
            "name": "SCAN Representative Informed About the Response",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4d64fc50-01ac-4ea7-b18e-d7102250392f",
            "sourceColumn": "SCAN Representative Informed About the Response",
            "summarizeBy": "none"
          },
          {
            "name": "Created By",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fc494756-62ac-4ce1-8e30-7901c18368b9",
            "sourceColumn": "Created By",
            "summarizeBy": "none"
          },
          {
            "name": "PK_hs_csri_limitedintakeresponseid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "08f34144-32ac-44a6-b4c4-d748906ae3fd",
            "sourceColumn": "PK_hs_csri_limitedintakeresponseid",
            "summarizeBy": "none"
          },
          {
            "name": "Modified By",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0fc518a6-b6ed-41b8-a709-887d907b11eb",
            "sourceColumn": "Modified By",
            "summarizeBy": "none"
          },
          {
            "name": "Modified On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "3da0260c-a2f8-4141-88b6-7adf53eeda09",
            "sourceColumn": "Modified On",
            "summarizeBy": "none"
          },
          {
            "name": "Business Unit",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "da86fa67-cb3d-4816-9859-ffecf218a3b0",
            "sourceColumn": "Business Unit",
            "summarizeBy": "none"
          },
          {
            "name": "State",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a829cc68-7edf-4c8a-a2d1-a6bef03a8539",
            "sourceColumn": "State",
            "summarizeBy": "none"
          },
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "868f5751-fb17-4274-9186-365e0baa8d86",
            "sourceColumn": "Status",
            "summarizeBy": "none"
          },
          {
            "name": "Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "4042b584-5dd5-441a-9740-f9cdf8053816",
            "sourceColumn": "Created On",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "689ae795-828d-4e2b-8ee4-4ad8462c4f9b",
        "partitions": [
          {
            "name": "CSRI Limited Intake Response",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    DeltaLakeFolder = \"hs_csri_limitedintakeresponse\",",
                "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
                "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
                "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
                "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdbyname\", \"hs_agencydetails\", \"PK_hs_csri_limitedintakeresponseid\", \"hs_datereceived\", \"hs_familyname\", \"hs_limitedintakeresponsenumber\", \"hs_name\", \"hs_receivingofficeridname\", \"modifiedbyname\", \"modifiedon\", \"owningbusinessunitname\", \"State\", \"Status\", \"hs_containsnoallegationsofharmcode_label\", \"hs_scanrepinformedabouttheresponsecode_label\", \"createdon\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"hs_agencydetails\", \"Agency Details\"}, {\"hs_containsnoallegationsofharmcode_label\", \"Contains No Allegations of Harm\"}, {\"hs_datereceived\", \"Date Received\"}, {\"hs_familyname\", \"Family Name\"}, {\"hs_limitedintakeresponsenumber\", \"Limited Intake Response Number\"}, {\"hs_name\", \"Title\"}, {\"hs_receivingofficeridname\", \"Person Receiving Information\"}, {\"hs_scanrepinformedabouttheresponsecode_label\", \"SCAN Representative Informed About the Response\"}, {\"createdbyname\", \"Created By\"}, {\"modifiedbyname\", \"Modified By\"}, {\"modifiedon\", \"Modified On\"}, {\"owningbusinessunitname\", \"Business Unit\"}, {\"createdon\", \"Created On\"}})",
                "in",
                "    #\"Renamed Columns\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Involved Person",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "0a7bdd7b-f556-4fb0-9312-5f36f16e9c06",
            "sourceColumn": "Created On",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_casetyperef",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fcaa822c-6282-47bb-ac43-cbdb1e65333a",
            "sourceColumn": "FK_hs_casetyperef",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_involvementrole",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2e1ba087-1f59-44f8-939f-fdca0866d537",
            "sourceColumn": "FK_hs_involvementrole",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_regarding",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ec5c1398-cd2f-4dba-93da-f0a74f97b45a",
            "sourceColumn": "FK_hs_regarding",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_relatedcase",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b8d5f768-e62a-4488-935d-5b639e31eee9",
            "sourceColumn": "FK_hs_relatedcase",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_relatedcaseparty",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fe50ed53-c517-40f2-8490-837aee64b8a8",
            "sourceColumn": "FK_hs_relatedcaseparty",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_relatedparty",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "dec88808-1da4-4b3f-9e39-ae0bb2f0f9f9",
            "sourceColumn": "FK_hs_relatedparty",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_relevantparty",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cdac4ae1-3729-4d2c-a13c-e47dda6feb9a",
            "sourceColumn": "FK_hs_relevantparty",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_yjcm_firststepsid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4e123996-4a3d-44cb-9009-94b16e0273cb",
            "sourceColumn": "FK_hs_yjcm_firststepsid",
            "summarizeBy": "none"
          },
          {
            "name": "Case Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "200d94df-dcc4-4c0c-bd46-70a29608fba8",
            "sourceColumn": "Case Type",
            "summarizeBy": "none"
          },
          {
            "name": "Comments",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7d69668d-f961-4224-b92b-602acf9a83e9",
            "sourceColumn": "Comments",
            "summarizeBy": "none"
          },
          {
            "name": "Current",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1003af46-15f4-4155-a83d-9a06d7340245",
            "sourceColumn": "Current",
            "summarizeBy": "none"
          },
          {
            "name": "Current Placement",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "955ca042-a373-4fcc-af14-32d57a2997b7",
            "sourceColumn": "Current Placement",
            "summarizeBy": "none"
          },
          {
            "name": "Deactivated From Portal",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e8ee3d92-e41f-4034-be07-a0ff0f616f64",
            "sourceColumn": "Deactivated From Portal",
            "summarizeBy": "none"
          },
          {
            "name": "End Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "eca87748-d0ea-4c43-bda9-fa602a819723",
            "sourceColumn": "End Date",
            "summarizeBy": "none"
          },
          {
            "name": "Involvement Role",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "63a0491a-a180-4b59-9a11-339230a37941",
            "sourceColumn": "Involvement Role",
            "summarizeBy": "none"
          },
          {
            "name": "Is Relationship",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "269baf29-2126-43cf-af8a-4c7eef9080ce",
            "sourceColumn": "Is Relationship",
            "summarizeBy": "none"
          },
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2b7120f1-b994-4e60-90d1-277677b3132c",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Regarding",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b88373d4-ee07-4481-b0d7-7c21088ee8ff",
            "sourceColumn": "Regarding",
            "summarizeBy": "none"
          },
          {
            "name": "Related Case",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c731d3ab-efa1-44d9-9d90-530a57a4a13e",
            "sourceColumn": "Related Case",
            "summarizeBy": "none"
          },
          {
            "name": "Related Case Party",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5b2b4ac5-135c-463d-b82b-101bf98f6ea3",
            "sourceColumn": "Related Case Party",
            "summarizeBy": "none"
          },
          {
            "name": "Related Party",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8121506b-4260-495a-86dc-111e75515dcb",
            "sourceColumn": "Related Party",
            "summarizeBy": "none"
          },
          {
            "name": "Relevant Party",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "85912c6e-5916-4e37-bf85-09cfeea6ed72",
            "sourceColumn": "Relevant Party",
            "summarizeBy": "none"
          },
          {
            "name": "Relevant Party Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "78ca0938-c6ab-4a7e-a915-cc66d38e222e",
            "sourceColumn": "Relevant Party Type",
            "summarizeBy": "none"
          },
          {
            "name": "Resides with Student",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fa2585ca-40e5-40d9-a902-3cc73db11f96",
            "sourceColumn": "Resides with Student",
            "summarizeBy": "none"
          },
          {
            "name": "Responsibility",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "195007f4-cd08-46a4-ad57-c8183be665d0",
            "sourceColumn": "Responsibility",
            "summarizeBy": "none"
          },
          {
            "name": "Same Address as Subject",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "02ba8828-f7c0-43ee-966d-5ae230d757f3",
            "sourceColumn": "Same Address as Subject",
            "summarizeBy": "none"
          },
          {
            "name": "Start Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "c208648d-f669-421c-a389-5d917d40e627",
            "sourceColumn": "Start Date",
            "summarizeBy": "none"
          },
          {
            "name": "Step up to Subject",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "12d073dc-bbb1-4f07-98a6-a5292533258d",
            "sourceColumn": "Step up to Subject",
            "summarizeBy": "none"
          },
          {
            "name": "Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "78f250e7-4922-4903-a938-ef4071f27dbc",
            "sourceColumn": "Type",
            "summarizeBy": "none"
          },
          {
            "name": "YJCM Filter Party",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "71c91040-91dd-4084-a21f-3831e33ca72e",
            "sourceColumn": "YJCM Filter Party",
            "summarizeBy": "none"
          },
          {
            "name": "YJCM First Steps ID",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d4245e17-1674-40fc-908e-b72c7f9f8aec",
            "sourceColumn": "YJCM First Steps ID",
            "summarizeBy": "none"
          },
          {
            "name": "Modified On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "2cfd532e-de4b-45c2-b46b-f3c873d135a4",
            "sourceColumn": "Modified On",
            "summarizeBy": "none"
          },
          {
            "name": "PK_hs_involvedpersonid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d91ea736-124b-4120-ab2b-9697982ce20a",
            "sourceColumn": "PK_hs_involvedpersonid",
            "summarizeBy": "none"
          },
          {
            "name": "State",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f4e0e2a4-797b-4ceb-ae82-2abfbf1d5569",
            "sourceColumn": "State",
            "summarizeBy": "none"
          },
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c2250e98-1d3a-4bc7-a3dc-854cbf5da786",
            "sourceColumn": "Status",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "6e13a3ac-5919-4792-ad8c-46ea32ef2cdd",
        "partitions": [
          {
            "name": "Involved Person",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    DeltaLakeFolder = \"hs_involvedperson\",",
                "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
                "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
                "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
                "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdon\", \"FK_hs_casetyperef\", \"FK_hs_involvementrole\", \"FK_hs_regarding\", \"FK_hs_relatedcase\", \"FK_hs_relatedcaseparty\", \"FK_hs_relatedparty\", \"FK_hs_relevantparty\", \"FK_hs_yjcm_firststepsid\", \"hs_casetyperefname\", \"hs_comments\", \"hs_current_label\", \"hs_currentplacement_label\", \"hs_deactivatefromportal_label\", \"hs_enddate\", \"hs_involvementrolename\", \"hs_isrelationship_label\", \"hs_name\", \"hs_regardingname\", \"hs_relatedcasename\", \"hs_relatedcasepartyname\", \"hs_relatedpartyname\", \"hs_relevantpartyname\", \"hs_relevantpartytype_label\", \"hs_resideswithstudent_label\", \"hs_responsibility_label\", \"hs_sameaddressassubject_label\", \"hs_startdate\", \"hs_stepuptosubject_label\", \"hs_type_label\", \"hs_yjcm_filterparty_label\", \"hs_yjcm_firststepsidname\", \"modifiedon\", \"PK_hs_involvedpersonid\", \"State\", \"Status\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"modifiedon\", \"Modified On\"}, {\"createdon\", \"Created On\"}, {\"hs_comments\", \"Comments\"}, {\"hs_current_label\", \"Current\"}, {\"hs_currentplacement_label\", \"Current Placement\"}, {\"hs_deactivatefromportal_label\", \"Deactivated From Portal\"}, {\"hs_enddate\", \"End Date\"}, {\"hs_involvementrolename\", \"Involvement Role\"}, {\"hs_isrelationship_label\", \"Is Relationship\"}, {\"hs_name\", \"Name\"}, {\"hs_regardingname\", \"Regarding\"}, {\"hs_relatedcasename\", \"Related Case\"}, {\"hs_relatedcasepartyname\", \"Related Case Party\"}, {\"hs_relatedpartyname\", \"Related Party\"}, {\"hs_relevantpartyname\", \"Relevant Party\"}, {\"hs_relevantpartytype_label\", \"Relevant Party Type\"}, {\"hs_resideswithstudent_label\", \"Resides with Student\"}, {\"hs_responsibility_label\", \"Responsibility\"}, {\"hs_sameaddressassubject_label\", \"Same Address as Subject\"}, {\"hs_startdate\", \"Start Date\"}, {\"hs_stepuptosubject_label\", \"Step up to Subject\"}, {\"hs_type_label\", \"Type\"}, {\"hs_yjcm_filterparty_label\", \"YJCM Filter Party\"}, {\"hs_yjcm_firststepsidname\", \"YJCM First Steps ID\"}, {\"hs_casetyperefname\", \"Case Type\"}})",
                "in",
                "",
                "#\"Renamed Columns\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Contact",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "203c0a59-9423-487e-a8ba-24f8886c5e83",
            "sourceColumn": "Created On",
            "summarizeBy": "none"
          },
          {
            "name": "First Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "947f399d-64d0-409e-bff3-9145f5b3de85",
            "sourceColumn": "First Name",
            "summarizeBy": "none"
          },
          {
            "name": "Full Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "lineageTag": "efb4c3f0-3337-4abe-ba85-4d329878e8a1",
            "sourceColumn": "Full Name",
            "summarizeBy": "none"
          },
          {
            "name": "Adoption Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1b658be7-9fde-4d26-83f0-222df4d34c80",
            "sourceColumn": "Adoption Status",
            "summarizeBy": "none"
          },
          {
            "name": "Birth Country",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cfbed20c-09f5-4f1d-a08f-6cd50914a000",
            "sourceColumn": "Birth Country",
            "summarizeBy": "none"
          },
          {
            "name": "Birth Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "24e6e67f-5347-42f3-aeac-d8980958899f",
            "sourceColumn": "Birth Date",
            "summarizeBy": "none"
          },
          {
            "name": "Cause of Passing",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f2a45ffb-f3f0-43c7-9c8d-aec4c3658847",
            "sourceColumn": "Cause of Passing",
            "summarizeBy": "none"
          },
          {
            "name": "Confirmed Disability",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4a2a4a95-f2fa-45c2-929b-33153bf65484",
            "sourceColumn": "Confirmed Disability",
            "summarizeBy": "none"
          },
          {
            "name": "Cultural Background",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1586b181-539a-465a-9aca-dca5326d8b17",
            "sourceColumn": "Cultural Background",
            "summarizeBy": "none"
          },
          {
            "name": "Date of Death",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "b17487a5-8874-4e57-9438-6dd64cff5db2",
            "sourceColumn": "Date of Death",
            "summarizeBy": "none"
          },
          {
            "name": "Ethnicity",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f4208ac0-fcf5-444d-9348-911a5a38737c",
            "sourceColumn": "Ethnicity",
            "summarizeBy": "none"
          },
          {
            "name": "Organisation",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4b91cc74-989c-45aa-bd71-cf5169fae533",
            "sourceColumn": "Organisation",
            "summarizeBy": "none"
          },
          {
            "name": "Person Category",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "24862bde-1167-48ea-8cc5-0c13b064a3ee",
            "sourceColumn": "Person Category",
            "summarizeBy": "none"
          },
          {
            "name": "Person ID",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6dea5f4a-73e0-42cb-832e-2af6d548eea4",
            "sourceColumn": "Person ID",
            "summarizeBy": "none"
          },
          {
            "name": "Primary Address",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e196ba15-a19d-4191-b6a4-adff418d118d",
            "sourceColumn": "Primary Address",
            "summarizeBy": "none"
          },
          {
            "name": "Primary Country of Residency",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "acb32284-8457-47c6-85d1-669df499492d",
            "sourceColumn": "Primary Country of Residency",
            "summarizeBy": "none"
          },
          {
            "name": "Primary Language",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e8c8ab43-241b-448f-950f-ae1b221d9b15",
            "sourceColumn": "Primary Language",
            "summarizeBy": "none"
          },
          {
            "name": "Religion",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "87f4a9da-2248-4f12-9514-7ba64133f820",
            "sourceColumn": "Religion",
            "summarizeBy": "none"
          },
          {
            "name": "Service Centre",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c8e12e98-c70f-4bea-9933-495f584a3f84",
            "sourceColumn": "Service Centre",
            "summarizeBy": "none"
          },
          {
            "name": "Sex",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "410fec6e-4232-4284-9858-a89987ca0da8",
            "sourceColumn": "Sex",
            "summarizeBy": "none"
          },
          {
            "name": "Tittle",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "eb0e5ed1-f2bb-404a-be77-49c0cc1f1f13",
            "sourceColumn": "Tittle",
            "summarizeBy": "none"
          },
          {
            "name": "Town / City of Birth",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ff64c033-070b-45be-a00a-805b42858ff9",
            "sourceColumn": "Town / City of Birth",
            "summarizeBy": "none"
          },
          {
            "name": "Job Title",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "13e87279-b89d-4494-9e16-fc042bcef24a",
            "sourceColumn": "Job Title",
            "summarizeBy": "none"
          },
          {
            "name": "Last Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e43f7b2a-a8f9-419c-be21-3156ace0dd9b",
            "sourceColumn": "Last Name",
            "summarizeBy": "none"
          },
          {
            "name": "Middle Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "dcd437d5-5d84-4c05-a4fc-3b19eac60eb8",
            "sourceColumn": "Middle Name",
            "summarizeBy": "none"
          },
          {
            "name": "Modified On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "19775725-c7a1-47b5-be3c-a63d8c4cdf54",
            "sourceColumn": "Modified On",
            "summarizeBy": "none"
          },
          {
            "name": "Nick Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1a50834d-123d-47f2-a085-f982a81fe62b",
            "sourceColumn": "Nick Name",
            "summarizeBy": "none"
          },
          {
            "name": "Parent Customer ID",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4262b25e-ce50-40c3-8b33-e5a3f160a96f",
            "sourceColumn": "Parent Customer ID",
            "summarizeBy": "none"
          },
          {
            "name": "PK_contactid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f65cae40-f7ec-4d01-85c5-f35da850c37f",
            "sourceColumn": "PK_contactid",
            "summarizeBy": "none"
          },
          {
            "name": "State",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2a0b506f-cab3-480c-98a9-f92ac4cbdec3",
            "sourceColumn": "State",
            "summarizeBy": "none"
          },
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6e58eca5-73c2-4d76-ac8c-f4072957f6c5",
            "sourceColumn": "Status",
            "summarizeBy": "none"
          },
          {
            "name": "Unborn Child",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "3d68e6fd-8342-42a1-8caf-d0f2319e3e1a",
            "sourceColumn": "Unborn Child",
            "summarizeBy": "none"
          },
          {
            "name": "Sex Assigned at Birth",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "15bcd4bd-7772-42b5-996a-9236a6010556",
            "sourceColumn": "Sex Assigned at Birth",
            "summarizeBy": "none"
          },
          {
            "name": "Child Age Group at Intake",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "expression": [
              "",
              "VAR vAge =",
              "    ADDCOLUMNS (",
              "        CALCULATETABLE (",
              "            SUMMARIZE (",
              "                'Involved Person',",
              "                'Contact'[PK_contactid],",
              "                'Contact'[Unborn Child],",
              "                'Contact'[Birth Date],",
              "                'CSRI Intake'[Created On]",
              "            ),",
              "            ALLEXCEPT ( Contact, Contact[PK_contactid] )",
              "        ),",
              "        \"Age Group\",",
              "            VAR vYear =",
              "                INT (",
              "                    DIVIDE (",
              "                        DATEDIFF ( 'Contact'[Birth Date], 'CSRI Intake'[Created On], DAY ),",
              "                        365.25,",
              "                        0",
              "                    )",
              "                )",
              "            RETURN",
              "                SWITCH (",
              "                    TRUE (),",
              "                    'Contact'[Unborn Child] = \"Yes\", \"Unborn\",",
              "                    OR ( vYear < 0, ISBLANK ( vYear ) ), \"Unknown\",",
              "                    vYear < 4, \"Under 4\",",
              "                    vYear < 10, \"4 to Under 10\",",
              "                    vYear < 15, \"10 to Under 15\",",
              "                    vYear > 15, \"15+\",",
              "                    \"Unknown\"",
              "                )",
              "    )",
              "RETURN",
              "    SUMMARIZE ( vAge, [Age Group] )"
            ],
            "isDataTypeInferred": true,
            "lineageTag": "0071c526-5495-46d9-9a47-8ab0b0f1ab0b",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Child Location Suburb",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "expression": [
              "",
              "CALCULATE (",
              "    FIRSTNONBLANK ( 'Linked Address'[Suburbs], 1 ),",
              "    FILTER (",
              "        ALL ( 'Linked Address' ),",
              "        'Linked Address'[FK_hs_person] = Contact[PK_contactid]",
              "            && 'Linked Address'[Is Location] = \"Yes\"",
              "            && 'Linked Address'[Status] = \"Active\"",
              "            && 'Linked Address'[Is Primary] = \"Yes\"",
              "    )",
              ")"
            ],
            "isDataTypeInferred": true,
            "lineageTag": "1d92fa4d-9ffc-4e46-86c1-4f14a4d03272",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "lineageTag": "12db03a6-9e73-4857-9808-7781ed6311cd",
        "partitions": [
          {
            "name": "Contact",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    DeltaLakeFolder = \"contact\",",
                "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
                "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
                "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
                "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"PK_contactid\", \"firstname\", \"fullname\", \"hs_birthcountryname\", \"hs_birthdate\", \"hs_causeofpassingname\", \"hs_dateofdeath\", \"hs_ethnicitytext\", \"hs_organisationname\", \"hs_personcategoryname\", \"hs_personid\", \"hs_primaryaddressname\", \"hs_primarycountryofresidencyname\", \"hs_primarylanguagerefname\", \"hs_servicecentrename\", \"hs_sexrefname\", \"hs_tittlename\", \"hs_towncityofbirth\", \"jobtitle\", \"lastname\", \"middlename\", \"modifiedon\", \"nickname\", \"parentcustomeridname\", \"hs_religionrefname\", \"State\", \"Status\", \"hs_sexassignedatbirth_label\", \"hs_unbornchilddetails_label\", \"hs_culturalbackground_label\", \"hs_confirmeddisability_label\", \"hs_adoptionstatus_label\", \"createdon\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"modifiedon\", \"Modified On\"}, {\"createdon\", \"Created On\"}, {\"firstname\", \"First Name\"}, {\"fullname\", \"Full Name\"}, {\"hs_birthcountryname\", \"Birth Country\"}, {\"hs_birthdate\", \"Birth Date\"}, {\"hs_causeofpassingname\", \"Cause of Passing\"}, {\"hs_adoptionstatus_label\", \"Adoption Status\"}, {\"hs_confirmeddisability_label\", \"Confirmed Disability\"}, {\"hs_culturalbackground_label\", \"Cultural Background\"}, {\"hs_dateofdeath\", \"Date of Death\"}, {\"hs_ethnicitytext\", \"Ethnicity\"}, {\"hs_organisationname\", \"Organisation\"}, {\"hs_personcategoryname\", \"Person Category\"}, {\"hs_personid\", \"Person ID\"}, {\"hs_primaryaddressname\", \"Primary Address\"}, {\"hs_primarycountryofresidencyname\", \"Primary Country of Residency\"}, {\"hs_primarylanguagerefname\", \"Primary Language\"}, {\"hs_religionrefname\", \"Religion\"}, {\"hs_servicecentrename\", \"Service Centre\"}, {\"hs_sexrefname\", \"Sex\"}, {\"hs_tittlename\", \"Tittle\"}, {\"hs_towncityofbirth\", \"Town / City of Birth\"}, {\"jobtitle\", \"Job Title\"}, {\"lastname\", \"Last Name\"}, {\"middlename\", \"Middle Name\"}, {\"nickname\", \"Nick Name\"}, {\"parentcustomeridname\", \"Parent Customer ID\"}, {\"hs_unbornchilddetails_label\", \"Unborn Child\"}, {\"hs_sexassignedatbirth_label\", \"Sex Assigned at Birth\"}})",
                "in",
                "    #\"Renamed Columns\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Key Measures",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "lineageTag": "b227fc89-b26f-451a-a7ea-3e460ddd4795",
        "measures": [
          {
            "name": "Children Intakes Current Period",
            "expression": [
              "",
              "VAR vIntake =",
              "    FILTER (",
              "        SUMMARIZE (",
              "            'Involved Person',",
              "            'Involved Person'[FK_hs_relatedcase],",
              "            'Involved Person'[Involvement Role],",
              "            'CSRI Intake'[PK_hs_csri_intakeid]",
              "        ),",
              "        'Involved Person'[Involvement Role] = \"Subject Child/Young Person\"",
              "            && NOT ISBLANK ( 'CSRI Intake'[PK_hs_csri_intakeid] )",
              "    )",
              "RETURN",
              "    COUNTROWS ( vIntake )"
            ],
            "formatString": "0",
            "lineageTag": "8241510e-5957-44e1-9479-647cbace2b07"
          },
          {
            "name": "Approved Intakes Current Period",
            "expression": [
              "",
              "CALCULATE (",
              "    DISTINCTCOUNT ( 'CSRI Intake'[PK_hs_csri_intakeid] ),",
              "    KEEPFILTERS ( 'CSRI Intake'[Status] = \"Approved\" )",
              ")"
            ],
            "formatString": "0",
            "lineageTag": "d6376585-6573-49d2-b8b5-4c2f7eeed5f0"
          },
          {
            "name": "Approved Intakes (Prior + Current)",
            "expression": [
              "",
              "VAR vEndCP =",
              "    LASTDATE ( 'Date Table'[Date] )",
              "VAR vStartDate =",
              "    CALCULATE ( FIRSTDATE ( 'Date Table'[Date] ), ALL ( 'Date Table' ) )",
              "RETURN",
              "    CALCULATE (",
              "        [Approved Intakes Current Period],",
              "        DATESBETWEEN ( 'Date Table'[Date], vStartDate, vEndCP ),",
              "        ALL ( 'Date Table' )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "940f9d48-11a7-4277-828c-d06e832aa75a"
          },
          {
            "name": "Total Children Intakes",
            "expression": [
              "",
              "CALCULATE ( [Children Intakes Current Period], ALL ('Date Table'), ALL(Contact) )"
            ],
            "formatString": "0",
            "lineageTag": "71d31a09-7649-42c1-b113-095abb6537ce"
          },
          {
            "name": "Intake Cases Current Period",
            "expression": [
              "",
              "DISTINCTCOUNT( 'CSRI Intake'[PK_hs_csri_intakeid] )"
            ],
            "formatString": "0",
            "lineageTag": "476c07c6-70e4-4062-bd6b-37cb372aa60b"
          },
          {
            "name": "Children Intakes (Prior + Current)",
            "expression": [
              "",
              "VAR vEndCP =",
              "    LASTDATE ( 'Date Table'[Date] )",
              "VAR vStartDate =",
              "    CALCULATE ( FIRSTDATE ( 'Date Table'[Date] ), ALL ( 'Date Table' ) )",
              "RETURN",
              "    CALCULATE (",
              "        [Children Intakes Current Period],",
              "        DATESBETWEEN ( 'Date Table'[Date], vStartDate, vEndCP ),",
              "        ALL ( 'Date Table' )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "867c3161-5e17-4183-9ecb-c44406c1220a"
          },
          {
            "name": "% Children Intakes",
            "expression": [
              "",
              "DIVIDE( [Children Intakes (Prior + Current)], [Total Children Intakes], 0 )"
            ],
            "formatString": "0.00%;-0.00%;0.00%",
            "lineageTag": "886bffa2-5a07-44e8-9148-4db10e0ce2bd"
          },
          {
            "name": "Children Intakes Prior Period",
            "expression": [
              "",
              "VAR vEndPP =",
              "    PREVIOUSDAY ( FIRSTDATE ( 'Date Table'[Date] ) )",
              "VAR vStartDate =",
              "    CALCULATE ( FIRSTDATE ( 'Date Table'[Date] ), ALL ( 'Date Table' ) )",
              "RETURN",
              "    CALCULATE (",
              "        [Children Intakes Current Period],",
              "        DATESBETWEEN ( 'Date Table'[Date], vStartDate, vEndPP ),",
              "        ALL ( 'Date Table' )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "c307dc62-996b-4619-a971-b1f10bcc5c43"
          },
          {
            "name": "Intake Cases Prior Period",
            "expression": [
              "",
              "VAR vEndPP =",
              "    PREVIOUSDAY ( FIRSTDATE ( 'Date Table'[Date] ) )",
              "VAR vStartDate =",
              "    CALCULATE ( FIRSTDATE ( 'Date Table'[Date] ), ALL ( 'Date Table' ) )",
              "RETURN",
              "    CALCULATE (",
              "        [Intake Cases Current Period],",
              "        DATESBETWEEN ( 'Date Table'[Date], vStartDate, vEndPP ),",
              "        ALL ( 'Date Table' )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "ea54d4aa-9f03-45b9-9456-6054daea22b4"
          },
          {
            "name": "Intake Cases (Prior + Current)",
            "expression": [
              "",
              "VAR vEndCP =",
              "    LASTDATE ( 'Date Table'[Date] )",
              "VAR vStartDate =",
              "    CALCULATE ( FIRSTDATE ( 'Date Table'[Date] ), ALL ( 'Date Table' ) )",
              "RETURN",
              "    CALCULATE (",
              "        [Intake Cases Current Period],",
              "        DATESBETWEEN ( 'Date Table'[Date], vStartDate, vEndCP ),",
              "        ALL ( 'Date Table' )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "b1aedbda-e479-4d47-9a19-423c4c4ff5e0"
          },
          {
            "name": "% Intake Cases",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": [
              "",
              "DIVIDE(",
              "    [Intake Cases Current Period], [Intake Cases (Prior + Current)], 0",
              ")"
            ],
            "lineageTag": "4fa7274b-b9d9-4bc4-8e38-c22e1449de35"
          }
        ],
        "partitions": [
          {
            "name": "Key Measures",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
                "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
                "in",
                "    #\"Removed Columns\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "TargetMetadata",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "EntityName",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f99489fb-ddeb-4d7b-80fb-a7420f1086f7",
            "sourceColumn": "EntityName",
            "summarizeBy": "none"
          },
          {
            "name": "AttributeName",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "bf43b6c4-c7f6-488f-be6d-dcb460e8aa7f",
            "sourceColumn": "AttributeName",
            "summarizeBy": "none"
          },
          {
            "name": "ReferencedEntity",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "30947be7-c5e2-4f84-8e0b-7ec7af43b3e4",
            "sourceColumn": "ReferencedEntity",
            "summarizeBy": "none"
          },
          {
            "name": "ReferencedAttribute",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ed0568e0-33c1-4e2e-adb2-0f49555a7593",
            "sourceColumn": "ReferencedAttribute",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "e4816ef4-71fd-49bd-8cdf-fd6b248f373c",
        "partitions": [
          {
            "name": "TargetMetadata",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    TargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[])",
                "in",
                "    TargetMetadata"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Test Measures",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "lineageTag": "b141ce66-6762-42cf-94a8-1df207cf5f7f",
        "measures": [
          {
            "name": "Intake Prior",
            "expression": [
              "",
              "VAR vStartCP =",
              "    FIRSTDATE ( 'Date Table'[Date] )",
              "VAR vEndCP =",
              "    LASTDATE ( 'Date Table'[Date] )",
              "VAR vDaysInPeriod =",
              "    DATEDIFF ( vStartCP, vEndCP, DAY )",
              "VAR vStartPP =",
              "    PREVIOUSDAY (",
              "        FIRSTDATE ( ( DATEADD ( 'Date Table'[Date], -1 * vDaysInPeriod, DAY ) ) )",
              "    )",
              "VAR vEndPP =",
              "    PREVIOUSDAY (",
              "        LASTDATE ( ( DATEADD ( 'Date Table'[Date], -1 * vDaysInPeriod, DAY ) ) )",
              "    )",
              "RETURN",
              "    CALCULATE (",
              "        [Children Intakes Current Period],",
              "        DATESBETWEEN ( 'Date Table'[Date], vStartPP, vEndPP ),",
              "        ALL ( 'Date Table' )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "342cb755-b848-4b9b-bb2d-5b8e7cfc1ee7"
          },
          {
            "name": "Intake Percentage",
            "expression": [
              "",
              "DIVIDE ( [Children Intakes Current Period], [Intake Total Selected], 0 )"
            ],
            "formatString": "0.00%;-0.00%;0.00%",
            "lineageTag": "bb0305c0-9af3-4b6e-9529-4c33cded4a1e"
          },
          {
            "name": "Intake Total Selected",
            "expression": [
              "",
              "CALCULATE ( [Children Intakes Current Period], ALLSELECTED() )"
            ],
            "formatString": "0",
            "lineageTag": "9775e1e3-8fd6-4409-8148-34d8b319e44a"
          }
        ],
        "partitions": [
          {
            "name": "Test Measures",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
                "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
                "in",
                "    #\"Removed Columns\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CSRI Notifier Contact Detail",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "columns": [
          {
            "name": "Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "fb477086-aa00-4f46-b9ba-dea96f4c1f50",
            "sourceColumn": "Created On",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_centre",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ecb3cfc6-1596-4470-bf0c-eb8a39e8c76e",
            "sourceColumn": "FK_hs_centre",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_intakeid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "12f35258-17c2-42c1-88f8-6cb6dacc6e8a",
            "sourceColumn": "FK_hs_intakeid",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_notifiercategoryid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ea4129ff-138f-410e-b0d2-96629fa52bfa",
            "sourceColumn": "FK_hs_notifiercategoryid",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_receivingofficerid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "73c0e38e-5563-49c4-93e0-b86e08cb9ab4",
            "sourceColumn": "FK_hs_receivingofficerid",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_receivingriscsscid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7782514d-6701-4a16-9788-15aece187162",
            "sourceColumn": "FK_hs_receivingriscsscid",
            "summarizeBy": "none"
          },
          {
            "name": "Address",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "97c9ea1c-2de9-40b3-a97f-3c419e0837f8",
            "sourceColumn": "Address",
            "summarizeBy": "none"
          },
          {
            "name": "Contact Method",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4a341a79-b5c5-49df-87a3-7f7fd4d7cd68",
            "sourceColumn": "Contact Method",
            "summarizeBy": "none"
          },
          {
            "name": "Date And Time Received",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "3af95e6c-c3de-4165-a3c8-197b264fd6e7",
            "sourceColumn": "Date And Time Received",
            "summarizeBy": "none"
          },
          {
            "name": "First Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c2292108-1340-43ab-bf04-990ac6617398",
            "sourceColumn": "First Name",
            "summarizeBy": "none"
          },
          {
            "name": "Intake Id",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "38b15829-2ee3-4d4a-bdc4-77cf0816bb1a",
            "sourceColumn": "Intake Id",
            "summarizeBy": "none"
          },
          {
            "name": "Is Anonymous",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "37a3482b-4303-4999-9f9e-e8f67fd2de47",
            "sourceColumn": "Is Anonymous",
            "summarizeBy": "none"
          },
          {
            "name": "Last Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "da606e23-4420-4e23-9ad0-bad47cf56e50",
            "sourceColumn": "Last Name",
            "summarizeBy": "none"
          },
          {
            "name": "Full Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fac480f0-92f0-4994-bb29-4761ece9e4ae",
            "sourceColumn": "Full Name",
            "summarizeBy": "none"
          },
          {
            "name": "Notifier Category",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "955bee2b-5874-41e0-a6a1-a743ff35d5a6",
            "sourceColumn": "Notifier Category",
            "summarizeBy": "none"
          },
          {
            "name": "Notifier Concerns",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cb94dab4-5b8e-4cf4-8455-e02a5d764fba",
            "sourceColumn": "Notifier Concerns",
            "summarizeBy": "none"
          },
          {
            "name": "Notifier Further Details",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "daa97fc0-518b-4c78-8ffc-b58a1f301a99",
            "sourceColumn": "Notifier Further Details",
            "summarizeBy": "none"
          },
          {
            "name": "Notifier Recontacted",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "aef2bceb-448b-4076-9103-38eab8b41498",
            "sourceColumn": "Notifier Recontacted",
            "summarizeBy": "none"
          },
          {
            "name": "Receiving Officer Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "57411a4d-c2b4-4b22-b7d9-67dd6a8c329c",
            "sourceColumn": "Receiving Officer Name",
            "summarizeBy": "none"
          },
          {
            "name": "Receiving RIS CSSC",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0e24b5ed-d67c-4d92-95e0-c81f5f527a6c",
            "sourceColumn": "Receiving RIS CSSC",
            "summarizeBy": "none"
          },
          {
            "name": "Modified On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "373fcd2f-6e22-42ab-bdc3-8fd25a02e1d1",
            "sourceColumn": "Modified On",
            "summarizeBy": "none"
          },
          {
            "name": "PK_hs_csri_notifiercontactdetailid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5145ac5e-a8e7-4e32-8214-80b39d332d7e",
            "sourceColumn": "PK_hs_csri_notifiercontactdetailid",
            "summarizeBy": "none"
          },
          {
            "name": "State",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d867db4a-0ee7-48c9-8d7e-812a323220c2",
            "sourceColumn": "State",
            "summarizeBy": "none"
          },
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7d247255-a442-41fb-aa9a-f13f06d9bb7c",
            "sourceColumn": "Status",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "f1819925-ee5e-408f-a113-e0f0ee25d6c4",
        "partitions": [
          {
            "name": "CSRI Notifier Contact Detail",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    DeltaLakeFolder = \"hs_csri_notifiercontactdetail\",",
                "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
                "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
                "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
                "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdon\", \"FK_hs_centre\", \"FK_hs_intakeid\", \"FK_hs_notifiercategoryid\", \"FK_hs_receivingofficerid\", \"FK_hs_receivingriscsscid\", \"hs_address\", \"hs_contactmethodcode_label\", \"hs_dateandtimereceived\", \"hs_firstname\", \"hs_intakeidname\", \"hs_isanonymous_label\", \"hs_lastname\", \"hs_name\", \"hs_notifiercategoryidname\", \"hs_notifierconcerns\", \"hs_notifierfurtherdetails\", \"hs_notifierrecontactedcode_label\", \"hs_receivingofficeridname\", \"hs_receivingriscsscidname\", \"modifiedon\", \"PK_hs_csri_notifiercontactdetailid\", \"State\", \"Status\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"createdon\", \"Created On\"}, {\"modifiedon\", \"Modified On\"}, {\"hs_contactmethodcode_label\", \"Contact Method\"}, {\"hs_dateandtimereceived\", \"Date And Time Received\"}, {\"hs_firstname\", \"First Name\"}, {\"hs_intakeidname\", \"Intake Id\"}, {\"hs_isanonymous_label\", \"Is Anonymous\"}, {\"hs_lastname\", \"Last Name\"}, {\"hs_name\", \"Full Name\"}, {\"hs_notifiercategoryidname\", \"Notifier Category\"}, {\"hs_notifierconcerns\", \"Notifier Concerns\"}, {\"hs_notifierfurtherdetails\", \"Notifier Further Details\"}, {\"hs_notifierrecontactedcode_label\", \"Notifier Recontacted\"}, {\"hs_receivingofficeridname\", \"Receiving Officer Name\"}, {\"hs_receivingriscsscidname\", \"Receiving RIS CSSC\"}, {\"hs_address\", \"Address\"}}),",
                "    #\"Changed Type\" =  #\"Renamed Columns\"",
                "in",
                "    #\"Changed Type\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Linked Address",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "FK_hs_centre",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e506af44-0ee4-49b6-9d67-bd45f4e56393",
            "sourceColumn": "FK_hs_centre",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_organisation",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f722c535-453d-4de6-81b7-70429e6fa0c5",
            "sourceColumn": "FK_hs_organisation",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_person",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e2eff6d2-8cb8-4697-b823-e15a2c52c299",
            "sourceColumn": "FK_hs_person",
            "summarizeBy": "none"
          },
          {
            "name": "FK_hs_regardingid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "25da3ef5-4ecc-449e-b855-3965a5f8e77c",
            "sourceColumn": "FK_hs_regardingid",
            "summarizeBy": "none"
          },
          {
            "name": "Centre",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9affcc22-15cd-496b-9e4c-67098be45ea6",
            "sourceColumn": "Centre",
            "summarizeBy": "none"
          },
          {
            "name": "Country",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a7858503-179e-449a-b2bf-b7923dce57e1",
            "sourceColumn": "Country",
            "summarizeBy": "none"
          },
          {
            "name": "Is Current",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "846a7fc6-5c6e-4549-9dfc-3ddc8b6e0906",
            "sourceColumn": "Is Current",
            "summarizeBy": "none"
          },
          {
            "name": "Full Address",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e4233c0f-e338-41b1-b7fa-cabee9a61efb",
            "sourceColumn": "Full Address",
            "summarizeBy": "none"
          },
          {
            "name": "Is Multiple Address",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "81f2f35d-0645-4d5e-b9f9-a7c81de48db7",
            "sourceColumn": "Is Multiple Address",
            "summarizeBy": "none"
          },
          {
            "name": "Is Valid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1dad9ce5-1b2e-4373-815f-6bb430136f15",
            "sourceColumn": "Is Valid",
            "summarizeBy": "none"
          },
          {
            "name": "Latitude",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "e22f5482-2823-4b8f-b2fc-862890a88a44",
            "sourceColumn": "Latitude",
            "summarizeBy": "sum"
          },
          {
            "name": "Location Type",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "440946fd-201c-4a6b-92bb-dce172315e11",
            "sourceColumn": "Location Type",
            "summarizeBy": "none"
          },
          {
            "name": "Longitude",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "7e5dcded-03e5-4983-9234-024b8f665752",
            "sourceColumn": "Longitude",
            "summarizeBy": "sum"
          },
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "392263fd-b918-4bbc-84fa-f0cfc86a3b32",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Organisation Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "722a470a-0196-4e95-a59f-7976bf850bbb",
            "sourceColumn": "Organisation Name",
            "summarizeBy": "none"
          },
          {
            "name": "Person Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "44812300-89f5-4943-abe5-484f7308106f",
            "sourceColumn": "Person Name",
            "summarizeBy": "none"
          },
          {
            "name": "Police Having Info Indicating Risk or Harm",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ce72f84b-9ade-4d5b-8b61-fc58bbc819ee",
            "sourceColumn": "Police Having Info Indicating Risk or Harm",
            "summarizeBy": "none"
          },
          {
            "name": "Postcode",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "ad2b1362-f6eb-4d9c-bac3-c6630cd8558c",
            "sourceColumn": "Postcode",
            "summarizeBy": "sum"
          },
          {
            "name": "Is Primary",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cb6daa79-5f81-4e0c-aad7-2a5488e7d184",
            "sourceColumn": "Is Primary",
            "summarizeBy": "none"
          },
          {
            "name": "Score",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "74ba0860-bd73-4b5d-9cd4-a38a68d55420",
            "sourceColumn": "Score",
            "summarizeBy": "sum"
          },
          {
            "name": "Suburbs",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6e525e93-c3e6-4b1a-8a21-f3b6d4bca39c",
            "sourceColumn": "Suburbs",
            "summarizeBy": "none"
          },
          {
            "name": "PK_hs_linkedaddressid",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c7bd19c0-8af8-4f62-a550-235669877f87",
            "sourceColumn": "PK_hs_linkedaddressid",
            "summarizeBy": "none"
          },
          {
            "name": "State",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "23bbc19c-3f55-4332-8649-02697eb891c4",
            "sourceColumn": "State",
            "summarizeBy": "none"
          },
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b7bdde96-49fe-42c7-86ea-a2054f9f251d",
            "sourceColumn": "Status",
            "summarizeBy": "none"
          },
          {
            "name": "Living Arrangement Percentage",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "1bbf2f0d-fd4b-49f6-8fb9-b8de40816379",
            "sourceColumn": "Living Arrangement Percentage",
            "summarizeBy": "sum"
          },
          {
            "name": "Created On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "6e2f2f87-340e-46dd-b61c-dc2904822edb",
            "sourceColumn": "Created On",
            "summarizeBy": "none"
          },
          {
            "name": "Is Location",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "afaf9cea-f9ea-44e7-abc8-8a6d300c9e21",
            "sourceColumn": "Is Location",
            "summarizeBy": "none"
          },
          {
            "name": "State / Territory",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "bcef7ac7-e70a-442c-924a-1ba5eb92ab76",
            "sourceColumn": "State / Territory",
            "summarizeBy": "none"
          },
          {
            "name": "Modified On",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "81332e89-135f-4278-bb0c-a26911f4df6c",
            "sourceColumn": "Modified On",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "f699bfcf-10db-4744-b4b0-d70dc8a216cf",
        "partitions": [
          {
            "name": "Linked Address",
            "mode": "import",
            "queryGroup": "Model Data",
            "source": {
              "expression": [
                "let",
                "    DeltaLakeFolder = \"hs_linkedaddress\",",
                "    DeltaTable = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & DeltaLakeFolder, [HierarchicalNavigation = false]),[]),",
                "\tTargetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"TargetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StatusMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StatusMetadata\",[HierarchicalNavigation = false]),[]),",
                "    StateMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"StateMetadata\",[HierarchicalNavigation = false]),[]),",
                "    OptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"OptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    GlobalOptionsetMetadata = fn_readDeltaTable(AzureStorage.DataLake(DeltaLakeContainer & \"GlobalOptionsetMetadata\",[HierarchicalNavigation = false]),[]),",
                "    BuildDeltaTable = fn_buildDeltaLakeTable(DeltaTable,TargetMetadata,OptionsetMetadata,GlobalOptionsetMetadata,StateMetadata,StatusMetadata,DeltaLakeFolder),",
                "    #\"Select Columns\" = Table.SelectColumns(BuildDeltaTable,{\"createdon\", \"FK_hs_centre\", \"FK_hs_organisation\", \"FK_hs_person\", \"FK_hs_regardingid\", \"hs_centrename\", \"hs_country\", \"hs_current_label\", \"hs_fulladdress\", \"hs_islocation_label\", \"hs_ismultipleaddress_label\", \"hs_isvalid_label\", \"hs_latitude\", \"hs_livingarrangementpercentage\", \"hs_locationtypename\", \"hs_longitude\", \"hs_name\", \"hs_organisationname\", \"hs_personname\", \"hs_policehavinginfoindicatingriskharm_label\", \"hs_postcode\", \"hs_primary_label\", \"hs_score\", \"hs_state_label\", \"hs_suburbs\", \"modifiedon\", \"PK_hs_linkedaddressid\", \"State\", \"Status\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Select Columns\",{{\"hs_centrename\", \"Centre\"}, {\"hs_country\", \"Country\"}, {\"hs_current_label\", \"Is Current\"}, {\"hs_fulladdress\", \"Full Address\"}, {\"hs_ismultipleaddress_label\", \"Is Multiple Address\"}, {\"hs_isvalid_label\", \"Is Valid\"}, {\"hs_latitude\", \"Latitude\"}, {\"hs_locationtypename\", \"Location Type\"}, {\"hs_longitude\", \"Longitude\"}, {\"hs_name\", \"Name\"}, {\"hs_organisationname\", \"Organisation Name\"}, {\"hs_personname\", \"Person Name\"}, {\"hs_policehavinginfoindicatingriskharm_label\", \"Police Having Info Indicating Risk or Harm\"}, {\"hs_postcode\", \"Postcode\"}, {\"hs_primary_label\", \"Is Primary\"}, {\"hs_score\", \"Score\"}, {\"hs_suburbs\", \"Suburbs\"}, {\"hs_state_label\", \"State / Territory\"}, {\"hs_islocation_label\", \"Is Location\"}, {\"createdon\", \"Created On\"}, {\"modifiedon\", \"Modified On\"}}),",
                "    #\"Percentage Calculation\" = Table.RemoveColumns(Table.AddColumn(#\"Renamed Columns\", \"Living Arrangement Percentage\", each [hs_livingarrangementpercentage] / 100), {\"hs_livingarrangementpercentage\"}),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Percentage Calculation\",{{\"Postcode\", Int64.Type}, {\"Score\", type number}, {\"Living Arrangement Percentage\", Percentage.Type}})",
                "in",
                "    #\"Changed Type\""
              ],
              "type": "m"
            }
          }
        ]
      }
    ]
  }
}